<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGabyoallightning</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 256;
healthpoints = healthpointsStart;
contactDamage = 3;
grav = 0.25 * image_yscale;
affectHud = false;
undamageable = true;
respawnRange = -1;
despawnRange = -1;

// Enemy specific code
stopped = false;
init = true;
playSound = true;
moveSpd = 1;
alarmStop = -1;
alarmStopValue = 90; 
sparkXscale = 1;
swapScale = true;
startDir = choose(-1, 1);
dir = startDir;
img = 0;
length = 0;
laserTop = x;
laserBottom = x;
beamSpr = sprGabyoallightningLightning;

killObj[1] = objKnuckleSandwich;
killObj[2] = objYamato;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    startDir = image_xscale;
    dir = startDir;
    image_xscale = 1;
    init = false;
}

event_inherited();

if (entityCanStep()) 
{
    //Find solids above or below
    if (image_yscale &gt; 0) 
    {
        laserTop = global.sectionTop;
        laserBottom = bbox_top;
    } 
    else 
    {
        laserTop = bbox_bottom + 1;
        laserBottom = global.sectionBottom;
    }

    with (objSolid) 
    {
        if (collision_rectangle(other.x - 7, other.laserTop, other.x + 7, 
        other.laserBottom, id, false, false)) 
        {
            if (other.image_yscale &gt; 0 &amp;&amp; bbox_bottom &gt; other.laserTop)
            {
                other.laserTop = bbox_bottom + 1;
            }
            else if (other.image_yscale &lt; 0 &amp;&amp; bbox_top &lt; other.laserBottom)
            {
                other.laserBottom = bbox_top;
            }
        }
    }
    
    with (objJumpBlockR)
    {
        if (collision_rectangle(other.x - 7, other.laserTop, other.x + 7, 
        other.laserBottom, id, false, false) &amp;&amp; isSolid) 
        {
            if (other.image_yscale &gt; 0 &amp;&amp; bbox_bottom &gt; other.laserTop)
            {
                other.laserTop = bbox_bottom + 1;
            }
            else if (other.image_yscale &lt; 0 &amp;&amp; bbox_top &lt; other.laserBottom)
            {
                other.laserBottom = bbox_top;
            }
        }
    }

    if (img &gt; 1)
    {
        with (objMegaman)
        {
            if (collision_rectangle(other.x - 5, other.laserTop, other.x + 5,
            other.laserBottom, id, 0, 0))
            {
                if (iFrames == 0 &amp;&amp; canHit)
                {
                    with (other)
                    {
                        entityEntityCollision();
                    }
                }
            }
        }
    }

    if (xcoll != 0) 
    {
        dir *= -1;
    }
    else if (ground) 
    {
        if (checkFall(16 * dir))
        {
            dir *= -1;
        }
    }
    xspeed = moveSpd * dir;

    if (!stopped) 
    {
        img += 0.25;
        if (img &gt;= 6)
        {
            sparkXscale *= -1;
            img = 2;
        }
    } 
    else 
    {
        if (img &gt; 0) img-= 0.25;
        alarmStop--
        if (!alarmStop)
        {
            img = 0;
            stopped = 0;
            playSound = true;
        }
    }
    image_index+= 1/6;
    if (!ground)
    {
        xspeed = 0;
    }
    if (playSound)
    {
        playSound = false;
        if (insideView()) playSFX(sfxBlockDevilLaser)
    }

} 
else 
{
    if (iceTimer &gt; 0)
    {
        if (img &gt; 0) img-= 0.25;
    }
    if (dead)
    {
        dir = startDir;
        alarmStop = 0;
        stopped = 0;
        img = 0;
        playSound = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
alarmStop = alarmStopValue;
stopped = true;
if (img &gt; 2) img = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!dead) 
{
    for (i = 1; i &lt; (abs(laserTop - laserBottom) / 8); i++)
    {
        var imgIndex = 0, xsc = -1;
        if (swapScale)
        {
            if (i mod 2 == 0)
            {
                xsc = 1;
                imgIndex = 1;
            }
        }
        draw_sprite_ext(beamSpr, img + (imgIndex * 6), x, 
        laserTop - 8 + (i * 8), sparkXscale * xsc, 1, 0, c_white, 1);
    }
    draw_sprite(beamSpr, img + 12, x, laserTop - 8);
    draw_sprite(beamSpr, img + 12, x, laserBottom - 8)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
