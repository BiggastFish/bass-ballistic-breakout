<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprOilSlide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

penetrate = 1;
pierces = 2;

grav = 0;
blockCollision = 0;

despawnRange = -1;

bulletLimitCost = 1;

image_speed = 1/8;
visible = false;

xspeed = 0;
yspeed = 0;

//variables

size = 16;
xs = 0;
dir = 0;
spd = 6;

timer = size*view_wview/16/spd * -1;
bossDelay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead &amp;&amp; !global.frozen)
{
    if (!visible &amp;&amp; timer &gt; (size*view_wview/16/spd * -1))
    {
        visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep()){

    x = view_xview + view_wview/2;
    y = view_yview + view_hview/2;
    
    xs = view_xview + round(timer*(spd * dir) / 16) * 16;

    bossDelay-= (bossDelay &gt; 0);
    if (timer &lt; size*view_wview/16/spd)
    {
        timer++;
        with (prtEntity)
        {
            //insideView()
            if (collision_rectangle(other.xs, view_yview, other.xs + 16*(other.size - 1), view_yview + view_hview,
            self, false, false) &amp;&amp; global.factionStance[other.faction, faction] &amp;&amp; canHit &amp;&amp; canIce &amp;&amp; !dead 
            &amp;&amp; insideView() &amp;&amp; !iFrames)
            {
                if (iceTimer &lt;= 175)
                {
                    with (other)
                    {
                        entityEntityCollision();
                    }
                }
                if (canOil)
                {
                    if (!iceTimer)
                    {
                        i = instance_create(bboxGetXCenter(), bboxGetYCenter(), objOilSlideSplash);
                        i.plzTarget = id;
                        i.depth = depth - 1;
                    }
                    entityIceFreeze(180, false, false, 1);
                }  
            }
        }
        with (prtBoss)
        {
            if (collision_rectangle(other.xs, view_yview, other.xs + 16*(other.size - 1), view_yview + view_hview,
            self, false, false) &amp;&amp; canHit &amp;&amp; !dead)
            {
                with (other)
                {
                    if (!bossDelay)
                    {
                        entityEntityCollision();
                        bossDelay = 6;
                    }
                }
            }
        }
    }
    else
    {
        event_user(EV_DEATH);
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    i = fireWeapon(0, 0, objOilSlide, 1, 4, 2, 1);
    if (i)
    {
        playSFX(sfxRushingWater);
        i.dir = image_xscale;
        i.timer = (i.size*view_wview/16/i.spd)*-1;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("OIL SLIDE", make_color_rgb(80, 48, 0), make_color_rgb(248, 184, 0), sprWeaponIconsOilSlide);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(x, y, string(timer));

for (z = 0; z &lt; view_hview/16; z++)
{    
    for (var a = 0; a &lt; size; a++)
    {
        var useSpr = sprOilSlide;
        if (a = 0)
        {
            if (dir &gt; 0)
                useSpr = sprOilSlideLeft;
            else
                useSpr = sprOilSlideRight;
        }
        else if (a = size - 1)
        {
            if (dir &gt; 0)
                useSpr = sprOilSlideRight;
            else
                useSpr = sprOilSlideLeft;
        }
        draw_sprite_ext(useSpr, image_index, xs + a*16, view_yview + 16*z, dir, 1,
        0, c_white, 1);
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
