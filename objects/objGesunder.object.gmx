<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGesunder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 4;

blockCollision = 0;
grav = 0;

hasPlayedSFX = false;
zap = false;
zapTimer = 0;
balls = 0;
ballTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (zap)
    {
        zapTimer++
        if (zapTimer &gt;= 60)
        {
            if (image_index &lt;= 5)
            {
                ballTimer++;
                if (ballTimer mod 3 == 0)
                    image_index++;                
            }
            else
            {
                if (!hasPlayedSFX)
                {
                    playSFX(sfxSola0Shoot);
                    hasPlayedSFX = true;
                }
                ballTimer++;
                if (ballTimer &gt;= 7)
                {
                    balls++;
                    for (i = -1; i &lt;= 2; i+= 2)
                    {
                        e = instance_create(x, y + (11 * image_yscale), 
                        objGesunderSpark);
                        e.dir = i;
                    }
                    if (balls &gt;= 3)
                    {
                        zap = false;
                        zapTimer = 0;
                        balls = 0;
                    }
                    ballTimer = 2;
                }
                image_index = 5 + ((ballTimer / 2) mod 2);
            }
        }
    }
    else
    {
        if (zapTimer == 0 &amp;&amp; image_index &gt; 0)
        {
            ballTimer++;
            if (ballTimer == 3)
                image_index = 3;
            if (ballTimer == 6)
                image_index = 2;
            if (ballTimer == 9)
            {
                extraTimer = 0;
                image_index = 0;
            }
        }
        else
        {
            image_index = 0;
            
            zapTimer++;
            if (zapTimer &gt;= 30)
            {
                image_index = 1;
                playSFX(sfxBlockZap);
                zap = true;
                zapTimer = 0;
                hasPlayedSFX = false;
            }
        }
    }
}
else if (dead)
{
    zap = 0;
    zapTimer = 0;
    balls = 0;
    ballTimer = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
