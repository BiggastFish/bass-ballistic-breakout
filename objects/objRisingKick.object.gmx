<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskMegaman</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 2;

penetrate = 3; // obviously we don't want to destroy the control for the dash
pierces = 2;
killOverride = true;

visible = 0;

shiftVisible = 3;
despawnRange = -1;

playSFX(sfxBreakDash); // needs its own sfx later

imgx = 0;
imgTimer = 0;
palTimer = 0;
palCol = make_color_rgb(88, 248, 152);

kickTimer = 35;
horKickSpeed = 2.4;
verKickSpeed = 2;
visibleDelay = 1;

kickLock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(parent))
{
    with(parent)
    {
        if (other.kickLock)
            lockPoolRelease(other.kickLock);
        hitTimer = 0;
        iFrames = 10;
        playerPalette();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// check for parent
if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}
else
{
    image_xscale = parent.image_xscale * 1.2;
    
    x = parent.x + (4 * image_xscale); // stay attached to MM
    y = parent.y;
}

if (!global.frozen)
{
    // iFrames fist/dash
    imgTimer++;
    if (imgTimer == 3)
    {
        imgx = !imgx;
        imgTimer = 0;
    }
    
    // Palette swap
    palTimer++
    if (palTimer == 6)
    {
        if (palCol == make_color_rgb(88, 248, 152))
        {
            palCol = make_color_rgb(248, 152, 56);
        }
        else
        {
            palCol = make_color_rgb(88, 248, 152);
        }
        palTimer = 0;
    }
    global.secondaryCol[playerID] = palCol;

    with (parent) // Mega Man anim + movement forcing
    {
        if (!other.kickLock)
        {
            other.kickLock = lockPoolLock(
                localPlayerLock[PL_LOCK_MOVE],
                localPlayerLock[PL_LOCK_JUMP],
                localPlayerLock[PL_LOCK_SHOOT],
                localPlayerLock[PL_LOCK_SLIDE],
                localPlayerLock[PL_LOCK_TURN],
                localPlayerLock[PL_LOCK_CLIMB],
                localPlayerLock[PL_LOCK_GRAVITY]);

            xspeed=0;
            yspeed=0;
        }

        xspeed = other.horKickSpeed * other.image_xscale;
        yspeed = -other.verKickSpeed * other.image_yscale;
        iFrames = -1;
    }

    if(isLocked(global.playerLock[PL_LOCK_MOVE])&amp;&amp;
    isLocked(global.playerLock[PL_LOCK_TURN]))
    {
        kickTimer=0;
        with(parent)
            xspeed=0;
    }

    // Destroy timer
    kickTimer -= 1;
    if (kickTimer &lt;= 0)
    {
        visibleDelay = 0;
        instance_destroy();
    }
}
with (parent)
{
    playerHandleSprites("RisingKick");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue("grounded", 3);
specialDamageValue(objSpine, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playSFX(sfxReflect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
