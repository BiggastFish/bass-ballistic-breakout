<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGasCan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This object will make a platform that rotates around a pivot point,
//that point being the position of this object
//Think the MM2 cloud platform, but more customisable;
event_inherited();

//prtEntity variables
grav = 0;
blockCollision = false;
bubbleTimer = -1;
contactDamage = 0;
canHit = false;
canDamage = false;
respawnRange = -1;
despawnRange = -1;
faction = 7; //So that the player can't be crushed by this platform

//--CREATION CODE VARIABLES--
sprite_index = sprGasCan; //What does this platform look like?
//Note: Recommended the sprite has its x-origin perfectly centre

image_speed = 0.2; //Self-explanitory

isSolid = 2; //Is it solid or topsolid? (You could also set it to 0, but then you can't stand on it)

rotationSpeed = 0.0174; //How fast the platform spins around the pivot

startAngle = 0; //Where does the platform start upon spawning in?
//Note: 0 means the rightmost point from the pivot. Increasing this values goes counter-clockwise

distance = 48; //How far from the pivot (i.e. radius in pixels)?

debugDraw = false; //Show some visual information about this platform

//--PRIVATE VARIABLES (don't edit this)--
sinCounter = 0;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defer setting sinCounter (so Creation Code can work)
sinCounter = startAngle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped) {
    var rotSpd = degtorad(rotationSpeed);
    sinCounter += rotSpd;
    xspeed = -(sin(sinCounter) * rotSpd * distance);
    yspeed = -(cos(sinCounter) * rotSpd * distance);
} else if (dead) {
    sinCounter = degtorad(startAngle);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Event
event_inherited();

if (spawned) {
    x = xstart + cos(sinCounter) * distance;
    y = ystart - sin(sinCounter) * distance;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
