<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHangedMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 160;
healthpoints = healthpointsStart;
grav = 0;
contactDamage = 4;
hitInvun = 4;
facePlayerOnSpawn = 1;
floatTimer = 0;
angVal = 180;
shotsLeft = choose(2, 3);
midPointY = y;
xSpd = 0;
dir = choose(-1, 1);
phase = 0;
introType = 0;
lastPhase = 0;
tx = x;
ty = y;
makeBat = 1;
batTimer = 0;
batID = 0;
for (i = 0; i &lt; 6; i++)
    batSon[i] = noone;

// Music
music = "HoTDBoss.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicVolume = 0.8;
musicLoop = true;
musicLoopSecondsStart = 6.665;
musicLoopSecondsEnd = 70.655;

// Damage Tables
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objYamato, 2);
enemyDamageValue(objKnuckleSandwich, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (!global.frozen)
{
    // Starting the intro animation
    if (startIntro)
    {
        startIntro = false;
        isIntro = true;
        drawBoss = true;
    }
    else if (isIntro)
    {
        visible = 1;
        for (batID = 0; batID &lt; 6; batID++)
        {
            if (!instance_exists(batSon[batID]))
            {
                with instance_create(x, y - 12, objHangedManBatSon)
                {
                    batID = other.batID;
                    ang = (360/6) * other.batID;
                    parent = other.id;
                    depth = other.depth + 5;
                    other.batSon[batID] = id;
                }
            }
        }
        floatTimer++;
        if (floatTimer &gt;= 45)
        {
            isIntro = false;
            floatTimer = 0;
            batID = 0;
        }
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        if (instance_exists(target))
        {
            tx = target.x;
            ty = target.y;
        }
        var yeah = view_xview + 128;
        floatTimer++;
        batTimer++;
        if (makeBat)
        {
            if (batTimer &gt;= 175 ||
            !instance_exists(objHangedManBatSon))
            {
                for (i = 0; i &lt; 6; i++)
                {
                    if (!instance_exists(batSon[i]))
                    {
                        with instance_create(x, y - 12, 
                        objHangedManBatSon)
                        {
                            batID = other.i;
                            ang = (360/6) * other.i;
                            parent = other.id;
                            depth = other.depth + 5;
                            other.batSon[other.i] = id;
                        }
                    }
                }
                batTimer = 0;
                batID = 0;
                shotsLeft--;
            }
            if (batTimer &gt;= 60 &amp;&amp; batTimer % 15 == 0 
            &amp;&amp; batTimer &lt;= 135)
            {
                with (batSon[batID])
                {
                    stationary = 0;
                    aimAtTarget(3.8);
                    other.batSon[batID] = noone;
                }
                batID+= 1 + (-6 * (batID == 5));
            }
        }
        if (phase &lt; 2)
            calibrateDirection();
        switch (phase)
        {
            case 0: // float around
                
                if ((x &lt;= (xstart - 64) - 160 &amp;&amp; dir &lt; 0) ||
                (x &gt;= (xstart - 64) + 160 &amp;&amp; dir &gt; 0))
                    dir*= -1;
                if ((xSpd &lt; 1.8 &amp;&amp; dir &gt; 0) || (xSpd &gt; -1.8 &amp;&amp; dir &lt; 0))
                    xSpd+= .03 * dir;
                angVal+= 3;
                y = midPointY + round(sin(degtorad(angVal)) * 12);
                xspeed = xSpd;
                if (shotsLeft &lt;= 0 &amp;&amp; batTimer &gt;= 45)
                {
                    shotsLeft = choose(2, 3);
                    floatTimer = 0;
                    batTimer = 0;
                    xspeed = 0;
                    phase = 1;
                }
                break;
            case 1: // bat gang :)
                makeBat = 0;
                if (floatTimer == 3)
                    image_index = 1;
                if (floatTimer &gt;= 48 &amp;&amp; floatTimer % 6 == 0
                &amp;&amp; floatTimer &lt;= 108)
                {
                    image_index = 2;
                    for (i = -1; i &lt; 2; i+= 2)
                    {
                        with instance_create(yeah + (64 * i),
                        view_yview, objHangedManBatSon)
                        {
                            stationary = 0;
                            despawnRange = 4;
                            if (instance_exists(target))
                                aimAtTarget(3.8);
                            else
                                aimAtPoint(3.8, yeah,
                                view_yview + 112);
                        }
                    }
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (prtEnemyProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
for (i = -1; i &lt; 2; i+= 2)
{
    m = instance_create(x, y, objEnemyBullet);
    m.image_xscale = image_xscale;
    m.sprite_index = sprite_index;
    if (i &gt; 0)
        m.image_index = 6;
    else
        m.image_index = 5;
    m.yspeed = -3;
    m.xspeed = 2 * (i * image_xscale);
    m.grav = .2;
    m.contactDamage = 0;
    m.reflectable = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//draw_text(view_xview + 32, view_yview + 48, batTimer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
