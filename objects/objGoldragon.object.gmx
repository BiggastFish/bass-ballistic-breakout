<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGoldragon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 60;
healthpoints = healthpointsStart;
blockCollision = 0;
grav = 0;
contactDamage = 4;
phase = 0;
introType = 0;
bruhTimer = 0;
angVal = 0;
shotsFired = 0;
tx = x;
ty = y;
targetSpot = tx;
dieToPits = false;
_im = 0;

useEndStageBehavior = false;

// Music
music = "MM8MiniBoss.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicVolume = 0.8;
musicLoop = true;
musicLoopSecondsStart = 6.600;
musicLoopSecondsEnd = 44.978;

// Damage Tables
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objYamato, 3);
enemyDamageValue(objKnuckleSandwich, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (!global.frozen)
{
    if (startIntro)
    {
        startIntro = false;
        isIntro = true;
        drawBoss = true;
    }
    else if (isIntro || (!isFight &amp;&amp; bruhTimer &gt;= 600))
    {
        visible = true;
        if (instance_exists(target))
        {
            bruhTimer+= target.ground &amp;&amp; isIntro;
        }
        if (!phase)
        {
            animationLoop(0, 1, 0.2);
            if (bruhTimer == 15)
            {
                image_xscale = 1;
                x = view_xview;
                y = view_yview + 128;
                playSFX(sfxEnemyBoost);
                
                var yeet;
                    
                grav = 0.12;
                yspeed = -3;
                storedYSpd = yspeed;
                yeet = xSpeedAim(x, y, xstart, ystart, -3, 0.12);
                xspeed = yeet;
                storedXSpd = yeet;
                with (objGoldragonSegment)
                {
                    bruhTimer = 6 * num;
                    storedXSpd = other.xspeed;
                    storedYSpd = -3;
                    x = view_xview;
                    y = other.y;
                    grav = 0;
                }
            }
                
            if (yspeed &gt; 0 &amp;&amp; bbox_top &gt;= view_yview + 224)
            {
                xspeed = 0;
                yspeed = 0;
                grav = 0;
            }
        }
        if (phase == 1)
        {
            angVal+= 3;
            x = xstart + round(cos(degtorad(angVal)) * 8);
            if (bruhTimer &lt; 600)
            {
                if (bruhTimer == 1)
                {
                    y = ystart;
                    image_xscale = -1;
                    image_index = 0;
                    angVal = 0;
                    with (objGoldragonSegment)
                    {
                        dang = (15 * num) - 15;
                    }
                }
                if (y &gt; view_yview + 128)
                {
                    y-=3;
                }
                else
                {
                    bruhTimer = 600;
                }
            }
            if (bruhTimer &gt;= 600)
            {
                if (bruhTimer == 645)
                {
                    playSFX(sfxMechaDragon);
                    screenShake(30, 0, 2);
                    image_index = 1;
                }
                if (bruhTimer == 680)
                {
                    image_index = 0;
                    bruhTimer = 600;
                    isIntro = false;
                }
            }
        }
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        if (instance_exists(target))
        {
            tx = target.x;
            ty = target.y;
        }
        var yeah = view_xview + 128;
        bruhTimer++;
        switch (phase)
        {
            case 0: // jump!!!
                animationLoop(0, 1, 0.2);
                if (bruhTimer == 15)
                {
                    x = tx;
                    with (objGoldragonSegment)
                    {
                        x = other.tx;
                        y = other.y;
                        grav = 0;
                    }
                    k = instance_create(x, view_yview + 200, objExplosion);
                    playSFX(sfxCompactor);
                }
                if (bruhTimer == 45)
                {
                    calibrateDirection();
                    targetSpot = tx;
                    playSFX(sfxEnemyBoost);
                    if (x &lt; view_xview + 64)
                    {
                        image_xscale = 1;
                        if (tx &lt;= x)
                        {
                            targetSpot = x + 32;
                        }
                    }
                    else if (x &gt; view_xview + view_wview - 64)
                    {
                        image_xscale = -1;
                        if (tx &gt;= x)
                        {
                            targetSpot = x - 32;
                        }
                    }
                    var yeet;
                    
                    grav = 0.12;
                    yspeed = -6;
                    storedYSpd = yspeed;
                    yeet = xSpeedAim(x, y, targetSpot, view_yview + 224, -4, .12);
                    xspeed = yeet;
                    storedXSpd = yeet;
                    with (objGoldragonSegment)
                    {
                        bruhTimer = 6 * num;
                        storedXSpd = other.xspeed;
                        storedYSpd = -6;
                    }
                }
                
                if (yspeed &gt; 0 &amp;&amp; bbox_top &gt;= view_yview + 224)
                {
                    xspeed = 0;
                    yspeed = 0;
                    grav = 0;
                }
                break;
            case 1: // shoot the
                if (bruhTimer == 30)
                {
                    x = tx;
                    targetSpot = tx;
                    image_index = 0;
                    k = instance_create(x, view_yview + 208, objExplosion);
                    playSFX(sfxCompactor);
                }
                if (bruhTimer &gt;= 55)
                {
                    angVal+= 3;
                    x = targetSpot + round(cos(degtorad(angVal)) * 8);
                }
                if (bruhTimer &gt;= 55 &amp;&amp; bruhTimer &lt; 600)
                {
                    if (bruhTimer == 55)
                    {
                        y = ystart;
                        calibrateDirection();
                        angVal = 0;
                        with (objGoldragonSegment)
                        {
                            dang = (15 * num) - 15;
                        }
                    }
                    if (y &gt; view_yview + 128)
                    {
                        y-=3;
                    }
                    else
                    {
                        bruhTimer = 600;
                    }
                }
                if (bruhTimer &gt;= 600)
                {
                    calibrateDirection();
                    if (bruhTimer == 645)
                    {
                        image_index = 1;
                    }
                    if (bruhTimer == 670)
                    {
                        playSFX(sfxEnemyShoot);
                        o = instance_create(x, y + 4, objGoldragonOrb);
                        o.xspeed = (tx - x)/30;
                        o.yspeed = (ty - (y + 4))/30;
                        o.image_xscale = image_xscale;
                    }
                    if (bruhTimer == 685)
                    {
                        image_index = 0;
                    }
                    if (bruhTimer &gt;= 700)
                    {
                        if (bbox_top &lt;= view_yview + 224)
                        {
                            y+= 3;
                        }
                        else
                        {
                            phase = 2;
                            bruhTimer = -15;
                        }
                    }
                }
                break;
            case 2: // snake!! the video game
                animationLoop(0, 1, 0.2);
                if (bruhTimer == 25)
                {
                    var side = choose(-1 ,1);
                    image_xscale = -side;
                    x = yeah + (128 * side);
                    y = ystart - 32;
                    k = instance_create(yeah + (96 * side), 
                    ystart - 32, objExplosion);
                    playSFX(sfxCompactor);
                }
                if (bruhTimer == 55)
                {
                    xspeed = 3 * image_xscale;
                    with (objGoldragonSegment)
                    {
                        x = other.x;
                        y = other.y;
                        bruhTimer = 6 * num;
                        storedXSpd = other.xspeed;
                        storedYSpd = 0;
                        grav = 0;
                    }
                }
                if (shotsFired == 0 &amp;&amp; ((x &gt;= view_xview + 224 &amp;&amp; image_xscale &gt; 0)
                || (x &lt;= view_xview + 32 &amp;&amp; image_xscale &lt; 0)))
                {
                    shotsFired = 1;
                    xspeed = 0;
                    yspeed = -3;
                    with (objGoldragonSegment)
                    {
                        bruhTimer = 6 * num;
                        storedXSpd = 0;
                        storedYSpd = -3;
                    }
                }
                if (shotsFired == 1 &amp;&amp; (y &lt;= view_yview + 32))
                {
                    bruhTimer = 75;
                    shotsFired = 2;
                    image_xscale *= -1;
                    xspeed = 3 * image_xscale;
                    yspeed = 0;
                    with (objGoldragonSegment)
                    {
                        bruhTimer = 6 * num;
                        storedXSpd = other.xspeed;
                        storedYSpd = 0;
                    }
                }
                if (bruhTimer &gt;= 80 &amp;&amp; shotsFired == 2 &amp;&amp; 
                ((tx &lt;= x &amp;&amp; image_xscale &gt; 0) || (tx &gt;= x &amp;&amp; image_xscale &lt; 0)))
                {
                    shotsFired = 3;
                    xspeed = 0;
                    yspeed = 3;
                    with (objGoldragonSegment)
                    {
                        bruhTimer2 = 6 * num;
                        storedXSpd2 = 0;
                        storedYSpd2 = 3;
                    }
                }
                if (yspeed &gt; 0 &amp;&amp; bbox_top &gt;= view_yview + 224)
                {
                    yspeed = 0;
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objGoldragonSegment))
{
    for (var i = 1; i &lt;= 7; i++)
    {
        with (instance_create(x, y, objGoldragonSegment))
        {
            num = i;
            depth = other.depth + i;
            other.seg[i] = id;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with (prtEnemyProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}

with (objGoldragonSegment)
{
    m = instance_create(x, y, objGravEffect);
    m.image_xscale = image_xscale;
    m.image_angle = image_angle;
    m.sprite_index = sprite_index;
    m.image_index = image_index;
    m.yspeed = -3;
    m.xspeed = irandom_range(-2, 2);
    m.grav = .2;
    instance_destroy();
}

stopMusic();
m = instance_create(x, y, objGravEffect);
m.image_xscale = image_xscale;
m.sprite_index = sprite_index;
m.image_index = image_index;
m.yspeed = -3;
m.xspeed = irandom_range(-2, 2);
m.grav = .2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
