<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprYamato</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 0;

contactDamage = 1.5;
image_speed = .8;

penetrate = 3;
pierces = 2;
slashNumber = 0;
slashTimer = 0;
judgmentCut = 0;

playSFX(sfxSlashClaw); // needs its own sfx later
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}
else if (!judgmentCut)
{   
    if (!parent.climbing)
        image_xscale = parent.image_xscale;
    if (parent.isSlide)
    {
        x = parent.x + (32 * image_xscale);
        y = parent.y + (8 * parent.gravDir) + (slashNumber * image_yscale);
    }
    else
    {
        x = parent.x + (24 * image_xscale);
        y = parent.y + (4 * parent.gravDir) + (slashNumber * image_yscale);
    }
}

if (!global.frozen)
{
    if (slashNumber &lt; 5)
    {
        slashTimer++;
        if (slashTimer = 3)
        {
            f = instance_create(x, y, objYamato);
            f.image_xscale = image_xscale;
            f.image_yscale = (image_yscale * -1);
            f.slashNumber = slashNumber + 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var chargeTime = 40; // Set charge time for this weapon
var initChargeTime = 20;

// Shooting buster shots if not charged.
if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT)
&amp;&amp; !instance_exists(objYamato)
&amp;&amp; global.ammo[playerID, global.weapon[playerID]] &gt; 0)
{
    i = fireWeapon(5, -2, objYamato, 9, 1, 1, 0);
    if (instance_exists(i))
    {
        i.xs = i.x - x;
        i.ys = i.y - y;
        i.xst = i.image_xscale;
    }
}

//////////////
// Charging //
//////////////

if (global.ammo[playerID, global.weapon[playerID]] &gt; 0)
{
    if ((global.keyShoot[playerID] || (isSlide &amp;&amp; chargeTimer &gt; 0))
        &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE))
    {
        if (!isShoot)
        {
            isCharge = true;
            if (!isSlide)
            {
                initChargeTimer += 1;
            }
            if (initChargeTimer &gt;= initChargeTime)
            {
                chargeTimer += 1;
                if (chargeTimer == 1)
                {
                    playSFX(sfxCharging);
                }
                if (chargeTimer &lt; chargeTime)
                {
                    var chargeTimeDiv, chargeCol;
                    chargeTimeDiv = round(chargeTime / 3);
                    if (chargeTimer &lt; chargeTimeDiv)
                    {
                        chargeCol = make_color_rgb(168, 0, 32); // Dark red
                    }
                    else if (chargeTimer &lt; chargeTimeDiv * 2)
                    {
                        chargeCol = make_color_rgb(228, 0,
                            88); // Red (dark pink)
                    }
                    else
                    {
                        chargeCol = make_color_rgb(248, 88,
                            152); // Light red (pink)
                    }
                    if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                    {
                        global.outlineCol[playerID] = chargeCol;
                    }
                    else
                    {
                        global.outlineCol[playerID] = c_black;
                    }
                }
                else
                {
                    if (chargeTimer == chargeTime)
                    {
                        audio_stop_sound(sfxCharging);
                        playSFX(sfxCharged);
                    }
                    switch (floor(chargeTimer / 3 mod 3))
                    {
                        case 0:
                            global.primaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objYamato]];
                            global.secondaryCol[playerID] = c_black;
                            global.outlineCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objYamato]];
                            break;
                        case 1:
                            global.primaryCol[playerID] = c_black;
                            global.secondaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objYamato]];
                            global.outlineCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objYamato]];
                            break;
                        case 2:
                            global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objYamato]];
                            global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objYamato]];
                            global.outlineCol[playerID] = c_black;
                            break;
                    }
                }
            }
        }
    }
    else // Release the charge shot
    {
        if (chargeTimer != 0 &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; !isHit)
        {
            /////////////////////
            // ACTUAL SHOOTING //
            /////////////////////
            
            // full charge
            if (chargeTimer &gt;= chargeTime)
            {
                instance_create(x, y, objJudgmentCut);
                global.ammo[playerID, global.weapon[playerID]] = max(0,
                    global.ammo[playerID, global.weapon[playerID]] - 3);
            }
            
            // reset all charging stuff
            chargeTimer = 0;
            initChargeTimer = 0;
            audio_stop_sound(sfxCharged);
            audio_stop_sound(sfxCharging);
            playerPalette(); // Reset the colors
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("YAMATO", make_color_rgb(60, 188, 252), make_color_rgb(184, 248, 216), sprWeaponIconsYamato);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.damage != 0)
{
    with (other)
    {
        var gottem = false;
        if (undamageable)
        {
            for (l = 0; l &lt; array_length_1d(killObj); l++)
            {
                if (other.object_index == killObj[l])
                {
                    if (object_index != objHivebomb) gottem = true;
                }
            }
        }
        par = object_get_parent(object_index);
        if (par == prtMiniBoss || par == prtBoss || !canHit)
        {
            exit;
        }
        if (healthpoints - global.damage &lt;= 0 || gottem)
        {
            var _i;
            _i = instance_create(x, y, objSlashEffect);
            _i.sprite_index = sprite_index;
            _i.image_index = image_index;
            _i.image_xscale = image_xscale;
            _i.image_yscale = image_yscale;
            _i.half = 'top';
            _i = instance_create(x, y, objSlashEffect);
            _i.sprite_index = sprite_index;
            _i.image_index = image_index;
            _i.image_xscale = image_xscale;
            _i.image_yscale = image_yscale;
            _i.half = 'bottom';
        }
    }
}
canDamage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>f = instance_create(x + 6 * image_xscale, y, objSingleLoopEffect);
f.sprite_index = sprShine;
f.image_speed = .5;
playSFX(sfxReflect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
