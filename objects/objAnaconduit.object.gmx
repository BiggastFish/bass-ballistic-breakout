<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAnaconduit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;
grav = 0;

// Enemy specific code
attackTimer = -1;
turnTimer = 0;
tx = x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        tx = target.x;
    }
    else
    {
        image_index = 0;
        attackTimer = 0;
    }
    if (attackTimer &lt; 40 &amp;&amp; 
    ((tx &gt; x &amp;&amp; image_xscale &lt; 0) || (tx &lt;= x &amp;&amp; image_xscale &gt; 0))
    &amp;&amp; instance_exists(target))
    {
        turnTimer++;
        if (turnTimer &gt;= 3)
        {
            attackTimer = 0;
            turnTimer = 0;
            if (image_index == 3)
                image_index = 4;
            else if (image_index == 4)
            {
                image_index = 0;
                image_xscale*= -1;
            }
            else
                image_index = 3;
        }
    }
    attackTimer++;
    if (attackTimer == 60) image_index = 1;
    if (attackTimer == 70) image_index = 0;
    if (attackTimer == 80) 
    {
        playSFX(sfxElectricShot);
        image_index = 2;
        r = instance_create(x + (12 * image_xscale), y + (8 * image_yscale),
        objSingleLoopEffect);
        r.sprite_index = sprAnaconduitEffect;
        r.image_speed = 0.3;
        r.image_xscale = image_xscale;
        r.depth = depth - 1;
        f = instance_create(x + (12 * image_xscale), y + (8 * image_yscale),
        objEnemyBullet);
        f.contactDamage = 3;
        f.sprite_index = sprAnaconduitShot;
        f.image_speed = 0.3;
        f.depth = depth - 1;
        if (tx &gt; x &amp;&amp; image_xscale &lt; 0) || (tx &lt;= x &amp;&amp; image_xscale &gt; 0)
        {
            f.xspeed = 3 * image_xscale;
        }
        else
        {
            with (f)
            {
                aimAtTarget(3);
            }
        }
                
    }
    if (attackTimer == 90)
    {
        image_index = 0;
        attackTimer = 0;
    }
}
else if (dead)
{
    image_index = 0;
    attackTimer = 0;
    turnTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
