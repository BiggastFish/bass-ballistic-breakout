<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTakanuva</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 160;
healthpoints = healthpointsStart;
blockCollision = 1;
grav = 0.25;
contactDamage = 4;
vine = noone;
facePlayerOnSpawn = 1;
vineTimer = 0;
spd = 0;
scrollSpeed = 0;
phase = 0;
introType = 0;
stuffDone = 420;
dashTimer = 0;
attackCount = 0;
movingPhaseLeft = 2;
phaseArray[0] = 1;
phaseArray[1] = 2;
phaseArray[2] = 0;
phaseArray[3] = 1;
phaseArray[4] = 2;
phaseArray[5] = 0;
phaseArray[6] = 1;
phaseArrayDir = 1;
phasePick = 2 + irandom(2);
lastAttack = 5;
tx = x;
ty = y;

// Music
music = "HoTDBoss.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicVolume = 0.8;
musicLoop = true;
musicLoopSecondsStart = 6.665;
musicLoopSecondsEnd = 70.655;

// Damage Tables
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objYamato, 2);
enemyDamageValue(objKnuckleSandwich, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (!global.frozen)
{
    // Starting the intro animation
    if (startIntro)
    {
        startIntro = false;
        isIntro = true;
        drawBoss = true;
    }
    else if (isIntro)
    {
        visible = 1;
        isIntro = false;
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        var yeah = view_xview + 128;
        if (instance_exists(target))
        {
            tx = target.x;
            ty = target.y;
        }
        dashTimer++;
        switch (phase)
        {
            case 0: // decide phase
                image_index = 0;
                xspeed = 0;
                if (lastAttack != 2)
                {
                    calibrateDirection();
                }
                if (dashTimer &gt;= 10)
                {
                    dashTimer = 0;
                    if (attackCount == 4)
                    {
                        image_index = 1;
                        phase = 5;
                        attackCount = 0;
                    }
                    else
                    {
                        if (!attackCount)
                        {
                            if (stuffDone == 420)
                            {
                                stuffDone = 1;
                            }
                            image_index = 1;
                            phase = 1;
                        }
                        else
                        {
                            if (abs(tx - x) &lt;= 64)
                            {
                                if (lastAttack == 2 || attackCount == 1)
                                {
                                    image_index = 0;
                                    phase = 3;
                                }
                                else
                                {
                                    image_index = 2;
                                    phase = 2;
                                }
                            }
                            else
                            {
                                image_index = 2;
                                phase = 2;
                            }
                        }
                    }
                }
                break;
            case 1: // kolhii smash
                if (!stuffDone)
                {
                    if (dashTimer == 7)
                    {
                        var mx;
                        if (tx &gt; yeah)
                        {
                            mx = view_xview + 48;
                            image_xscale = -1;
                        }
                        else
                        {
                            mx = view_xview + 208;
                            image_xscale = 1;
                        }
                        image_index = 2;
                        yspeed = -6;
                        xspeed = xSpeedAim(x, y, mx, y, -6, grav);
                    }
                    if (ycoll &gt; 0)
                    {
                        playSFX(sfxHoohooRock);
                        image_index = 1;
                        xspeed = 0;
                        dashTimer = 0;
                        stuffDone = 1
                    }
                }
                if (stuffDone == 1)
                {
                    if (dashTimer == 3)
                    {
                        calibrateDirectionPoint(yeah);
                        image_index = 2;
                        yspeed = -sqrt(abs(2 * gravAccel * 128));
                    }
                    if (dashTimer &gt; 3 &amp;&amp; yspeed &gt;= 0)
                    {
                        grav = 0;
                        yspeed = 0;
                        dashTimer = 0;
                        stuffDone = 2;
                    }
                }
                if (stuffDone == 2)
                {
                    if (dashTimer == 36)
                    {
                        var bass = point_direction(spriteGetXCenter(), spriteGetYCenter(), 
                        tx, ty)
                        playSFX(sfxCannonShoot);
                        b = instance_create(x, y, objTakanuvaKolhii);
                        b.image_xscale = image_xscale;
                        b.xspeed = cos(degtorad(bass)) * 6;
                        b.yspeed = -sin(degtorad(bass)) * 6;
                        b.ty = ty;
                    }
                    if (dashTimer &lt; 48)
                    {
                        image_index = 6 + (dashTimer div 4) mod 2;
                    }
                    if (dashTimer == 48)
                    {
                        image_index = 0;
                        grav = 0.25;
                    }
                    if (ycoll &gt; 0)
                    {
                        playSFX(sfxHoohooRock);
                        image_index = 1;
                        stuffDone = 3;
                        dashTimer = 0;
                    }
                }
                if (stuffDone == 3 &amp;&amp; dashTimer == 3)
                {
                    image_index = 0;
                    stuffDone = 0;
                    phase = 0;
                    dashTimer = 0;
                    lastAttack = 1;
                    attackCount++;
                }
                break;
            case 2: // dash
                if (!stuffDone)
                {
                    if (image_index &lt; 4)
                    {
                        image_index+= 0.5;
                    }
                    else
                    {
                        playSFX(sfxDash);
                        image_index = 4;
                        stuffDone = 1;
                        xspeed = 2.5 * image_xscale;
                    }
                }
                if (stuffDone == 1)
                {
                    if (dashTimer % 6 == 0)
                    {
                        a = instance_create(x, y, objTrailEffect);
                        a.sprite_index = sprite_index;
                        a.image_index = image_index;
                        a.image_xscale = image_xscale;
                        a.depth = depth + 5;
                    }
                    if (abs(tx - x) &lt;= 48 || ((tx &lt;= x &amp;&amp; image_xscale &gt; 0)
                     || (tx &gt; x &amp;&amp; image_xscale &lt; 0)))
                    {
                        image_index = 5;
                        stuffDone = 2;
                    }
                }
                if (stuffDone == 2)
                {
                    if (xspeed != 0)
                    {
                        xspeed -= ((1/12) * 2.5) * sign(xspeed);
                    }
                    else
                    {
                        image_index = 0;
                        stuffDone = 3;
                        dashTimer = 0;
                    }
                }
                if (stuffDone == 3)
                {
                    calibrateDirection();
                    if (dashTimer &gt;= 5)
                    {
                        stuffDone = 0;
                        dashTimer = 0;
                        phase = 0;
                        lastAttack = 2;
                    }
                }
                break;
            case 3: // close slash
                if (!stuffDone &amp;&amp; dashTimer == 5)
                {
                    playSFX(sfxSlashClaw);
                    s = instance_create(x, y, objTakanuvaSlash);
                    s.image_xscale = image_xscale;
                    s.parent = id;
                }
                if (stuffDone &amp;&amp; dashTimer == 14)
                {
                    phase = 0;
                    stuffDone = 0;
                    dashTimer = 0;
                    lastAttack = 3;
                    attackCount++;
                }
                break;
            case 5: // mask shine
                if (!stuffDone)
                {
                    if (dashTimer == 7)
                    {
                        image_index = 2;
                        yspeed = -6;
                        xspeed = xSpeedAim(x, y, yeah, y, -6, grav);
                    }
                    if (ycoll &gt; 0)
                    {
                        image_index = 1;
                        playSFX(sfxHoohooRock);
                        xspeed = 0;
                        x = yeah;
                        dashTimer = 0;
                        stuffDone = 1;
                    }
                }
                if (stuffDone == 1)
                {
                    if (dashTimer == 7)
                    {
                        image_index = 2;
                    }
                    if (dashTimer == 21)
                    {
                        playSFX(sfxEnkerCharge);
                        image_index = 0;
                        var dope = 0, img = 0;
                        if (tx &lt;= x)
                            dope = 2;
                        img = irandom(2) + dope;
                        l = instance_create(x, y, objTakanuvaShine);
                        l.image_index = img;
                        l.parent = id;
                    }
                }
                if (stuffDone == 2)
                {
                    if (dashTimer == 20)
                    {
                        stuffDone = 0;
                        dashTimer = 0;
                        phase = 0;
                        lastAttack = 5;
                    }
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (objPerfumaVine)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (prtEnemyProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objParallax)
    xspeed = 0;
m = instance_create(x, y, objEnemyBullet);
m.image_xscale = image_xscale;
m.sprite_index = sprite_index;
m.yspeed = -3;
m.xspeed = 2 * image_xscale + ((-3 * (abs(scrollSpeed) &lt; 1.4)) * image_xscale);
m.grav = .2;
m.contactDamage = 0;
m.reflectable = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*
draw_text(view_xview + 32, view_yview + 64, dashTimer);
draw_text(view_xview + 32, view_yview + 80, ground);
draw_text(view_xview + 32, view_yview + 96, phase);
draw_text(view_xview + 32, view_yview + 112, stuffDone);
draw_text(view_xview + 32, view_yview + 128, xspeed);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
