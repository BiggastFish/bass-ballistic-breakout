<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr48HPauseMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

phase = 0; // 0: increasing the black rectangle's alpha

option = 0;
oldOption = 0;
weaponOffset = 0;
offsetTimer = -1;

// get currently visible weapons
weaponVisibleN = 0;
for (var i = 0; i &lt;= global.totalWeapons; i++)
{
    if (global.weaponLocked[global.weaponHotbar[i]] &lt; 2)
    {
        weaponVisible[weaponVisibleN++] = i;
    }
}
visibleWeapons = min(10, weaponVisibleN); // up to 10 visible

for (var i = 0; i &lt; weaponVisibleN; i++)
{
    if (global.weapon[0] == global.weaponHotbar[weaponVisible[i]])
    {
        option = i;
        oldOption = i;
    }
}
woption = i;

visibleWeapons = 10;

oldWeapon = global.weapon[0];
resetWeapon = false; // Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened?

wtank = 0;
mtank = 0;

retryConfirm = 0;
exitConfirm = 0;
hotBarArrangeMode = false;

playerID = 0;
costumeID = 0;

menuPart = 0;
pageDrawOffset = 0;

event_user(2);

itemRow = 0;
rowOffset = 0;
rowOffsetMoveDir = 1;

itemCursorImg = 0;

itemName = "N/A";
itemDescription = "???";

swapStoreOption = 0;

// Stop charging
with (objMegaman)
{
    playerPalette();
}

// set these here. makes everyone's lives easier.

etankPositionX = 24;
etankPositionY = 176;
wtankPositionX = 56;
wtankPositionY = 176;
mtankPositionX = 88;
mtankPositionY = 176;

optionsPositionX = 184;
optionsPositionY = 167;
checkPositionX = 184;
checkPositionY = 185;
exitPositionX = 184;
exitPositionY = 203;

arrowTimer = 20;

quickScrollTimer = 0; // 24;

//Weapon wheel...something tells me this won't work for the first time since EZ overhauled the pause menu :\
weaponset = 0;
wheelDirection = -1;
quickWeaponwheelTimer = 0;
gamepadWheelDir = 0;
wheelBuffer = 0;
wheelAngleSet = -1;
prevWeapon = -1;
prevChip = -1;
prevDir = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Can't control while options menu is open
if (instance_exists(objOptionsMenu))
{
    exit;
}
// do pause menu
switch (phase)
{
    // Fading out
    case 0:
        with (objGlobalControl)
        {
            if (fadeAlpha == 1)
            {
                global.nextRoom = 0;
                other.visible = 1;
                other.phase = 1;
                showhealth = 0;
            }
        }
        break;
    
    // Fading in
    case 1:
        with (objGlobalControl)
        {
            if (fadeAlpha == 0)
            {
                other.phase = 2;
            }
        }
        event_user(0); // Moving the selection
        
        break;
    
    // Idle
    case 2:
        event_user(menuPart); // Moving the selection

        // Regular menu
        if (menuPart == 0)
        {
            // Select the weapon/tank
            if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID])
            {
                if (option &lt;= weaponVisibleN)
                {
                    if (instance_exists(objMegaman.vehicle) &amp;&amp; option != 0)
                    {
                        if (!objMegaman.vehicle.weaponsAllowed)
                        {
                            playSFX(sfxError);
                            exit;
                        }
                    }
                    
                    global.nextRoom = -1;
                    phase = 3;
                    
                    global.weapon[playerID] = global.weaponHotbar[weaponVisible[option]];
                    playSFX(sfxMenuSelect);
                }
                else if (option == weaponVisibleN + 1) // E-Tank
                {
                    if (global.eTanks &amp;&amp; global.playerHealth[playerID] &lt; 28)
                    {
                        option = 99; // Nothing selected
                        phase = 5;
                        wtank = 0;
                        mtank = 0;
                        global.eTanks -= 1;
                        eTankTimer = 0;
                        loopSFX(sfxEnergyRestore);
                    }
                    else
                    {
                        playSFX(sfxError);
                    }
                }
                else if (option == weaponVisibleN + 2) // W-Tank
                {
                    // Check if weapon energy actually needs filling
                    var proceed;
                    proceed = false;
                    for (i = 0; i &lt; weaponVisibleN; i += 1)
                    {
                        if (ceil(global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]]) &lt; 28
                        &amp;&amp; !global.weaponLocked[i])
                        {
                            proceed = true;
                        }
                    }
                    
                    if (global.wTanks &amp;&amp; proceed)
                    {
                        option = 0; // Go back to weapon column
                        phase = 6;
                        mtank = 0;
                        wtank = 1;
                        global.wTanks -= 1;
                        playSFX(sfxMenuSelect);
                    }
                    else
                    {
                        playSFX(sfxError);
                    }
                }
                else if (option == weaponVisibleN + 3) // M-Tank
                {
                    if (global.mTanks &gt; 0) // Check if health or weapon energy actually needs filling
                    {
                        var proceed = false;
                        for (i = 0; i &lt; weaponVisibleN; i += 1)
                        {
                            if (ceil(global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]]) &lt; 28)
                            {
                                proceed = true;
                            }
                        }
                        
                        if (ceil(global.playerHealth[playerID]) &lt; 28)
                        {
                            proceed = true;
                        }
                        
                        if (proceed) // If proceed is still false after the past calculations, it seems there is nothing to fill
                        {
                            option = 99; // Nothing selected
                            phase = 5;
                            mtank = 1;
                            wtank = 0;
                            global.mTanks -= 1;
                            eTankTimer = 0;
                            loopSFX(sfxEnergyRestore);
                        }
                        else
                        {
                            playSFX(sfxError);
                        }
                    }
                    else
                    {
                        playSFX(sfxError);
                    }
                }
                else if (option == weaponVisibleN + 4) // Options
                {
                    instance_create(x, y, objOptionsMenu);
                    playSFX(sfxMenuSelect);
                    exit;
                }
                else if (option == weaponVisibleN + 5) // Retry
                {
                    if (!retryConfirm)
                    {
                        retryConfirm = true;
                        playSFX(sfxMenuSelect);
                        exit;
                    }
                }
                else if (option == weaponVisibleN + 6) // Exit
                {
                    if (!exitConfirm)
                    {
                        exitConfirm = true;
                        playSFX(sfxMenuSelect);
                        exit;
                    }
                }
            }
            
            // swap pages
            if (global.keyWeaponSwitchRightPressed[0] &amp;&amp; global.nextRoom != -1)
            {
                menuPart = 1;
                phase = 7;
                swapStoreOption = option;
                playSFX(sfxMenuMove);
            }
        }
        // item menu
        else if (menuPart == 1)
        {
            // update row offset
            if (rowOffset % 24 != 0)
                rowOffset += (rowOffsetMoveDir * 6);
            
            // toggle upgrades
            if (global.keyJumpPressed[playerID])
            {
                if (itemRow &lt;= 1)
                {
                    var array = items;
                    if (itemRow == 1)
                        array = beatItems;
                    
                    var nameString = stringSubstring(array[option], 1, stringIndexOf(array[option], "|"));
                    
                    playSFX(sfxClamp);
                    variable_global_set(nameString, -variable_global_get(nameString));
                    event_user(2);
                }
            }
            
            // close
            if (global.keyShootPressed[0] || global.keyPausePressed[0])
            {
                playSFX(sfxMenuSelect);
                global.nextRoom = -1;
                phase = 3;
            }
            
            // swap pages
            if (global.keyWeaponSwitchLeftPressed[0] &amp;&amp; global.nextRoom != -1)
            {
                menuPart = 0;
                phase = 7;
                option = swapStoreOption;
                playSFX(sfxMenuMove);
            }
        }
        
        // Confirming exit
        if (exitConfirm &amp;&amp; !global.nextRoom)
        {
            if (option == weaponVisibleN + 6)
            {
                if (global.keyJumpPressed[playerID]
                    || global.keyPausePressed[playerID])
                {
                    returnFromLevel(true, true);
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                exitConfirm = false;
            }
        }
        
        // Confirming retry
        if (retryConfirm &amp;&amp; !global.nextRoom)
        {
            if (option == weaponVisibleN + 5)
            {
                if (global.keyJumpPressed[playerID]
                    || global.keyPausePressed[playerID])
                {
                    global.nextRoom = room;
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                retryConfirm = false;
            }
        }
        
        break;
    
    // Fading out
    case 3:
        with (objGlobalControl)
        {
            if (fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
            {
                showhealth = 1;
                with (other)
                {
                    if (resetWeapon)
                    {
                        global.weapon[playerID] = oldWeapon;
                        with (objMegaman)
                        {
                            playerPalette();
                        }
                    }
                    
                    if (global.weapon[playerID] != oldWeapon)
                    {
                        with (prtPlayerProjectile)
                        {
                            instance_destroy();
                        }
                    }
                    
                    global.nextRoom = 0;
                    visible = 0;
                }
            }
            else if (fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
            {
                with (other)
                {
                    audio_resume_all();
                    instance_destroy();
                    global.frozen = 0;
                }
            }
        }
        
        break;
    
    // E/M-Tank restoring health
    case 5:
        eTankTimer += 1;
        if (eTankTimer &gt;= 3)
        {
            eTankTimer = 0;
            
            var proceed;
            proceed = false;
            
            // Fill selected weapon w/ W Tank
            if (wtank)
            {
                if (global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] &lt; 28)
                {
                    global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] = min(28,
                        global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] + 1);
                    proceed = true;
                }
            }
            
            // Fill all weapons - M-Tank only
            if (mtank)
            {
                for (i = 1; i &lt; weaponVisibleN; i += 1)
                {
                    if (global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]] &lt; 28)
                    {
                        global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]] = min(28,
                            global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]] + 1);
                        proceed = true;
                    }
                }
            }
            
            // Fill health
            if ((global.playerHealth[playerID] &lt; 28) &amp;&amp; (!wtank))
            {
                global.playerHealth[playerID] = min(28,
                    global.playerHealth[playerID] + 1);
                proceed = true;
            }
            
            if (!proceed)
            {
                eTankTimer = 0;
                phase = 2;
                if (!wtank)
                {
                    option = oldOption;
                    global.weapon[playerID] = oldWeapon;
                    with (objMegaman)
                    {
                        playerPalette();
                    }
                }
                
                audio_stop_sound(sfxEnergyRestore);
            }
        }
        
        break;
    
    // W-Tank weapon selection
    case 6:
        event_user(0); // Moving the selection
        
        if (option &gt; 0 &amp;&amp; option &lt; weaponVisibleN)
        {
            if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID])
            {
                if (global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] &lt; 28)
                {
                    phase = 5;
                    eTankTimer = 0;
                    loopSFX(sfxEnergyRestore);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
        }
        
        break;
}

// update stored player sprite
if (instance_exists(objMegaman))
{
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            other.costumeID = costumeID;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>itemName = "Energy Balancer";
itemDescription = "Automatically sends weapon energy to the weapon with the least energy if no energy is needed for the current weapon.";

if (menuPart == 0 || pageDrawOffset &lt; 256)
    exit;

switch (itemRow)
{
    // Items
    case 0:
    {
        var itemKey = stringSubstring(items[option], 1, stringIndexOf(items[option], "|"));
        switch (itemKey)
        {
            case "shotUpgrade":
                itemName = "Shot Limit Upgrade";
                itemDescription = "A solar-powered toy gun that somehow connects to the Mega Buster. Increases the number of buster shots you can have onscreen.";
                break;
            case "skullAmulet":
                itemName = "Salmon Shield";
                itemDescription = "A spy tool that can make an electromagnetic shield. Saves you from a fatal blow by leaving you with 1 HP.";
                break;
            case "energySaver":
                itemName = "Energy Saver";
                itemDescription = "An repaired Energy Saver now working in peak condition. Halves all weapons' ammo consumption.";
                break;
            case "stepBooster":
                itemName = "Step Booster";
                itemDescription = "Allows Mega Man to climb ladders faster.";
                break;
            case "blastWind":
                itemName = "Blast Wind";
                itemDescription = "Jet turbines and reinforced iron boots that nullify knockback while sliding.";
                break;
            case "absorptionArmor":
                itemName = "Absorption Armor";
                itemDescription = "A strange armor that boosts your defenses, at the cost of enemies no longer dropping health pickups.";
                break;
            case "balanceStabilizer":
                itemName = "Balance Stabilizer";
                itemDescription = "Makes you immune to the effects of dizziness.";
                break;
            case "smite":
                itemName = "Smite";
                itemDescription = "Enforces the fury of God upon the weak. This holy upgrade makes all weapons instantly kill any Met-type enemy.";
                break;
            case "payday":
                itemName = "Payday";
                itemDescription = "A modified metal detector that increases bolt value and drop chance, but lowers the drop chance of everything else.";
                break;
            case "beatSaber":
                itemName = "Beat Saber";
                itemDescription = "[work in progress]";
                break;
            case "awakeningChipNeo":
                itemName = "Awakening Chip NEO";
                itemDescription = "[work in progress]";
                break;
        }
    }
    break;
        
    // Beat
    case 1:
    {
        var itemKey = stringSubstring(beatItems[option], 1, stringIndexOf(beatItems[option], "|"));
        switch (itemKey)
        {
            case "beatRescue":
                itemName = "Beat Call";
                itemDescription = "If you fall into a pit, Beat will rescue you at the cost of some weapon energy. Trajectory is controllable.";
                break;
            case "beatAttack":
                itemName = "Beat Attack";
                itemDescription = "Allows Beat to attack nearby enemies, homing in to peck at them at the cost of a little weapon energy.";
                break;
            case "beatRoost":
                itemName = "Beat Roost";
                itemDescription = "Hold Down to make Beat circle around you and regenerating health slowly. Getting hit during a roost will waste energy.";
                break;
            case "beatFetch":
                itemName = "Beat Fetch";
                itemDescription = "Allows Beat to home in on and grab most items, bringing them back to you.";
                break;
            case "beatLegendaryWings":
                itemName = "Legendary Wings";
                itemDescription = "Increases the amount of time before Beat drops you after picking you up from a bottomless pit.";
                break;
            case "beatDrillBeak":
                itemName = "Drill Beak";
                itemDescription = "Increases Beat's damage output as well as giving him the ability to pierce enemy shields.";
                break;
            case "beatEnhancedSensors":
                itemName = "Enhanced Sensors";
                itemDescription = "Allows Beat to attack bosses as well as enemies.";
                break;
            case "beatMedic":
                itemName = "Beat Medic";
                itemDescription = "Hold Down to prompt Beat to give you a large health pickup at the cost of some weapon energy.";
                break;
            case "beatFortifiedTalons":
                itemName = "Fortified Talons";
                itemDescription = "Allows Beat to home in on heavy items such as E-Tanks.";
                break;
            case "beatGoldenSeeds":
                itemName = "Golden Seeds";
                itemDescription = "Decreases the ammo consumption of Beat's moves.";
                break;
            case "beatHarmonize":
                itemName = "Beat Harmonize";
                itemDescription = "Alters Beat's whistle.";
                break;
        }
    }
    break;
        
    // Junk
    case 2:
    {
        switch (global.junkCollected[option])
        {
            case "dizzyDial":
                itemName = "Dizzy Dial";
                itemDescription = "[work in progress]"
                break;
            case "hevGloves":
                itemName = "HEV Gloves";
                itemDescription = "[work in progress]"
                break;
            case "judgementSilversword":
                itemName = "Judgement Silversword";
                itemDescription = "[work in progress]"
                break;
            case "cursedAmulet":
                itemName = "Cursed Amulet";
                itemDescription = "[work in progress]"
                break;
            case "radio":
                itemName = "Radio";
                itemDescription = "[work in progress]"
                break;
            case "bustedEnergySaver":
                itemName = "Busted Energy Saver";
                itemDescription = "[work in progress]"
                break;
            case "copperMedal":
                itemName = "Copper Medal";
                itemDescription = "[work in progress]"
                break;
            case "jetTurbine":
                itemName = "Jet Turbine";
                itemDescription = "[work in progress]"
                break;
            case "ironBoots":
                itemName = "Iron Boots";
                itemDescription = "[work in progress]"
                break;
            case "jointPlug":
                itemName = "Joint Plug";
                itemDescription = "[work in progress]"
                break;
            case "gunDelSol":
                itemName = "Gun Del Sol";
                itemDescription = "[work in progress]"
                break;
            case "industrialVacuum":
                itemName = "Industrial Vacuum";
                itemDescription = "[work in progress]"
                break;
            case "crackedArmor":
                itemName = "Cracked Armor";
                itemDescription = "[work in progress]"
                break;
            case "metalDetector":
                itemName = "Metal Detector";
                itemDescription = "[work in progress]"
                break;
            case "powerMagnet":
                itemName = "Power Magnet";
                itemDescription = "[work in progress]"
                break;
            case "zetsabre":
                itemName = "Zetsabre";
                itemDescription = "[work in progress]"
                break;
            case "greenEye":
                itemName = "Green Eye";
                itemDescription = "[work in progress]"
                break;
        }
    }
    break;
        
    // Sidequests
    case 3:
    {
        var sidequestNum = real(stringSubstring(sidequests[option], stringIndexOf(sidequests[option], "[") + 1, stringIndexOf(sidequests[option], "]"))) + 1;
        switch (sidequestNum)
        {
            case 1:
                itemName = "Avian Kingdom";
                itemDescription = "[work in progress]"
                break;
            case 2:
                itemName = "See Seasickness";
                itemDescription = "[work in progress]"
                break;
            case 3:
                itemName = "Poltergeist";
                itemDescription = "[work in progress]"
                break;
            case 4:
                itemName = "Funky Fresh Beats";
                itemDescription = "[work in progress]"
                break;
            case 5: 
                itemName = "Co-Ladder All Damage";
                itemDescription = "[work in progress]"
                break;
            case 6:
                itemName = "Drunk.";
                itemDescription = "[work in progress]"
                break;
            case 7:
                itemName = "Infiltration";
                itemDescription = "[work in progress]"
                break;
            case 8:
                itemName = "Dancing All Night";
                itemDescription = "[work in progress]"
                break;
            case 9:
                itemName = "Mutual Attraction";
                itemDescription = "[work in progress]"
                break;
            case 10:
                itemName = "Bootcamp Graduation";
                itemDescription = "[work in progress]"
                break;
            case 11:
                itemName = "Red or Yellow?";
                itemDescription = "[work in progress]"
                break;
            case 12:
                itemName = "Credit When It's Due";
                itemDescription = "[work in progress]"
                break;
            case 13:
                itemName = "Occultics Witch";
                itemDescription = "[work in progress]"
                break;
            case 14:
                itemName = "[SVSW Placeholder]";
                itemDescription = "[work in progress]"
                break;
            case 15:
                itemName = "[BES Placeholder]";
                itemDescription = "[work in progress]"
                break;
            case 16:
                itemName = "Goody Two-Shoes";
                itemDescription = "[work in progress]"
                break;
        }
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get item progress
// this code sucks and we should probably code upgrades differently in magmml4 or smth lol

items = makeArray("");
// (junk is already an array)

// Items
arrayAppend(items, "energyBalancer|" + string(global.energyBalancer));
if (global.shotUpgrade != 0) 
    arrayAppend(items, "shotUpgrade|" + string(global.shotUpgrade));
if (global.skullAmulet != 0) 
    arrayAppend(items, "skullAmulet|" + string(global.skullAmulet));
if (global.energySaver != 0)
    arrayAppend(items, "energySaver|" + string(global.energySaver));
if (global.stepBooster != 0) 
    arrayAppend(items, "stepBooster|" + string(global.stepBooster));
if (global.blastWind != 0) 
    arrayAppend(items, "blastWind|" + string(global.blastWind));
if (global.absorptionArmor != 0) 
    arrayAppend(items, "absorptionArmor|" + string(global.absorptionArmor));
if (global.payday != 0) 
    arrayAppend(items, "payday|" + string(global.payday));
if (global.balanceStabilizer != 0) 
    arrayAppend(items, "balanceStabilizer|" + string(global.balanceStabilizer));
if (global.smite != 0) 
    arrayAppend(items, "smite|" + string(global.smite));
if (global.beatSaber != 0) 
    arrayAppend(items, "beatSaber|" + string(global.beatSaber));
if (global.awakeningChipNeo != 0) 
    arrayAppend(items, "awakeningChipNeo|" + string(global.awakeningChipNeo));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xDir = (global.keyRightPressed[playerID] - global.keyLeftPressed[playerID]);
var yDir = (global.keyDownPressed[playerID]) - (global.keyUpPressed[playerID]);

// Vertical movement
if (yDir != 0)
{
    playSFX(sfxMenuMove);
    
    if (array_length_1d(beatItems) &gt; 1)
    {
        itemRow += yDir;
        rowOffset = 0;
        
        // looping
        if (itemRow &lt; 0)
            itemRow = maxItemRow;
        else if (itemRow &gt; maxItemRow)
            itemRow = 0;
            
        // Failsafe
        if (itemRow == 2 &amp;&amp; array_length_1d(global.junkCollected) &lt;= 1)
            itemRow += yDir;
            
        option = 1;
        rowOffset = 0;
    }
}

// Horizontal movement
if (xDir != 0)
{
    playSFX(sfxMenuMove);
    
    var array;
    switch (itemRow)
    {
        case 0: array = items; break;
        case 1: array = beatItems; break;
        case 2: array = global.junkCollected; break;
        case 3: array = sidequests; break;
    }
    
    option += xDir;
    
    if (option &gt;= array_length_1d(array))
    {
        option = 1;
        rowOffset = 0;
    }
    else if (option &lt; 1)
    {
        option = array_length_1d(array) - 1;
        
        if (array_length_1d(array) &gt; 9)
            rowOffset = (24 * (array_length_1d(array) - 10));
        else
            rowOffset = 0;
    }
    
    // offset shift   
    if (array_length_1d(array) &gt; 9)
    {
        if ((option &gt;= 6 &amp;&amp; option &lt;= array_length_1d(array) - 5 &amp;&amp; xDir &gt; 0)
        || (option &lt;= array_length_1d(array) - 6 &amp;&amp; rowOffset != 0 &amp;&amp; xDir &lt; 0))
        {
            rowOffset += (xDir * 6);
            rowOffsetMoveDir = xDir;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//hotBarArrangeMode = (global.keyShoot[playerID]) * (hotBarArrangeMode + 1);
hotBarArrangeMode = false;

var xDir = (global.keyRightPressed[playerID] - global.keyLeftPressed[playerID]);
var yDir = (global.keyDownPressed[playerID]) - (global.keyUpPressed[playerID]);

var emergencyPass = false;
if (option &lt; weaponVisibleN)
{
    if (global.weaponLocked[global.weaponHotbar[weaponVisible[option]]])
        emergencyPass = true;
}
    
if (yDir != 0 || emergencyPass)
{
    if (!emergencyPass)
        playSFX(sfxMenuMove);
    
    // Weeapons
    if (option &lt; weaponVisibleN)
    {
        woption = option;
        
        if (hotBarArrangeMode) // swap weapons:
        {
            if (option + yDir &lt; weaponVisibleN &amp;&amp; option + min(yDir, 0) &gt;= 1)
            {
                option += yDir;
                swap(global.weaponHotbar, weaponVisible[option], weaponVisible[option - yDir]);
            }
        }
        else
        {
            do
            {
                if (emergencyPass)
                    option --;
                else
                    option += yDir;
                
                // wtanks......
                if (phase == 6)
                {
                    if (option == 5 &amp;&amp; yDir &lt; 0)
                        option = weaponVisibleN - 1;
                    else if (option == 6 &amp;&amp; yDir &gt; 0)
                        option = 0;
                    else if (option &gt;= weaponVisibleN)
                        option = 6;
                    else if (option &lt; 0)
                        option = 5;
                }
                else
                {
                    if (option == 5 &amp;&amp; yDir &lt; 0)
                        option = weaponVisibleN + 6;
                    else if (option == 6 &amp;&amp; yDir &gt; 0)
                        option = weaponVisibleN + 1;
                    else if (option &gt;= weaponVisibleN)
                        option = weaponVisibleN + 4;
                    else if (option &lt; 0)
                        option = weaponVisibleN + 1;
                }
            }
                until (option &gt;= weaponVisibleN || !global.weaponLocked[global.weaponHotbar[weaponVisible[option]]]);
        }
    }
    // Tanks or buttons
    else
    {
        if (option == weaponVisibleN + 4 &amp;&amp; yDir &lt; 0)
            option = weaponVisibleN - 1;
        else if (option &gt;= weaponVisibleN + 1 &amp;&amp; option &lt;= weaponVisibleN + 3)
        {
            if (yDir &lt; 0)
                option = 5;
            else
                option = 0;
        }
        else if (option == weaponVisibleN + 6 &amp;&amp; yDir &gt; 0)
            option = 6;
        else
            option += yDir;
        
        //option -= 3 * (1 - ((option &lt;= weaponVisibleN + 3) * 2));
    }
}

if (xDir != 0)
{
    playSFX(sfxMenuMove);
    
    if (option &lt; weaponVisibleN) // horizontal movements while on the weapon list
    {
        //option = weaponVisibleN + 2 - xDir;
        if (option &lt; 5 || (option &lt; 6 &amp;&amp; global.beatRescue != 0)) 
            option += 6;
        else if (option &gt;= 6)
            option -= 6;
            
        // a
        while (global.weaponLocked[global.weaponHotbar[weaponVisible[option]]])
        {
            option += xDir;
                
            if (option &lt; 0)
            {
                option = weaponVisibleN + 1;
                exit;
            }
            else if (option &gt;= weaponVisibleN)
            {
                option = weaponVisibleN + 4;
                exit;
            }
        }
    }
    else // horizontal movements while on the misc selections
    {
        if (option == weaponVisibleN + 1 &amp;&amp; xDir &lt; 0)
            option = weaponVisibleN + 4;
        else if (option &gt;= weaponVisibleN + 4)
        {
            if (xDir &lt; 0)
                option = weaponVisibleN + 3;
            else
                option = weaponVisibleN + 1;
        }
        else
        {
            option += xDir;
        }
    }
}

// Set weapon
global.weapon[playerID] = 0;
if (option &lt; weaponVisibleN)
{
    global.weapon[playerID] = global.weaponHotbar[weaponVisible[option]];
}

with (objMegaman)
{
    playerPalette();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// center in screen on nonstandard resolutions
x = view_xview + (view_wview[0] - 256) / 2;
y = view_yview + (view_hview[0] - 240) / 2;

// Menu
if (phase != 0)
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    draw_clear(c_black);
    
    var col;
    col[0, 0] = global.nesPalette[0];
    col[1, 0] = global.nesPalette[13];
    col[0, 1] = global.primaryCol[0];
    col[1, 1] = global.secondaryCol[0];
    col[0, 2] = make_color_rgb(255, 228, 164);
    col[1, 2] = c_white;
    
    if (option &lt; weaponVisibleN)
    {
        weaponOffset = clamp(option - floor(visibleWeapons * 0.5), 0, weaponVisibleN - visibleWeapons - 1);
    }
    
    if (abs(weaponOffset - offsetTimer) &lt; 0.05 || offsetTimer &lt; 0)
    {
        offsetTimer = weaponOffset;
    }
    offsetTimer += (weaponOffset - offsetTimer) / 8;
    
    // Items go first because they draw behind the sprite!!
    draw_set_color(c_black);
    draw_rectangle(x + 256, y, x + 512, y + 224, false);
    draw_set_color(c_white);

    // draw cursor (this doesn't need to be under the menu but it'll never BE under so I can be lazy and put it here)
    itemCursorImg += 0.15;
    draw_sprite_ext(sprShopCursor, itemCursorImg, x + 256 + ((24 * option) - rowOffset) * (pageDrawOffset &gt;= 256) + (24 * (pageDrawOffset &lt; 256)), y + 40 + (32 * itemRow) * (pageDrawOffset &gt;= 256), 1, 1, 0, c_white, 1);
    
    // draw itself
    drawSelf();
    
    // Options
    draw_sprite_ext(spr48HOptionsButton, (option == weaponVisibleN + 4), x + optionsPositionX, y + optionsPositionY, 1, 1, 0, c_white, 1);
    
    // Checkpoint
    draw_sprite_ext(spr48HRetryButton, (option == weaponVisibleN + 5) + retryConfirm * 2, x + checkPositionX, y + checkPositionY, 1, 1, 0, c_white, 1);
    
    // Exit
    draw_sprite_ext(spr48HExitButton, (option == weaponVisibleN + 6) + exitConfirm * 2, x + exitPositionX, y + exitPositionY, 1, 1, 0, c_white, 1);
    
    // Icons, ammo bars and names
    var wSep = 20; // Seperation between icons
    
    var xOff = view_xview + 32 - pageDrawOffset;
    var yOff = view_yview + 38;
    
    draw_set_halign(fa_left);
    for (i = 0; i &lt; weaponVisibleN; i++)
    {
        var w = global.weaponHotbar[weaponVisible[i]];
        var cl = (option == i);
        
        // Icon
        draw_sprite_ext(global.weaponIcon[w], 0, xOff, yOff, 1, 1, 0, col[!cl, 2], 1);
        draw_sprite_ext(global.weaponIcon[w], 1, xOff, yOff, 1, 1, 0, col[0, cl], 1);
        draw_sprite_ext(global.weaponIcon[w], 2, xOff, yOff, 1, 1, 0, col[1, cl], 1);
        draw_sprite_ext(global.weaponIcon[w], 3, xOff, yOff, 1, 1, 0, col[1, 2], cl);
        
        if (!global.weaponLocked[w])
        {
            // Drawing ammo bars
            ammo = ceil(global.playerHealth[playerID] * (i == 0) + global.ammo[playerID, w] * (i != 0));
            
            draw_sprite_ext(sprPauseMenuBarPrimary, ammo, xOff + 18, yOff + 8, 1, 1, 0, col[0, cl * (1 + (i == 0))], 1);
            draw_sprite_ext(sprPauseMenuBarSecondary, ammo, xOff + 18, yOff + 8, 1, 1, 0, col[1, cl * (1 + (i == 0))], 1);
            
            // Draw infinite energy mark over relevant bars
            if (global.infiniteEnergy[w])
            {
                draw_sprite_ext(sprInfinityMark, 0, xOff + 18 + 28, yOff + 8, 1, 1, 0, c_white, 1);
                draw_sprite_ext(sprInfinityMark, 1, xOff + 18 + 28, yOff + 8, 1, 1, 0, col[0, cl], 1);
                draw_sprite_ext(sprInfinityMark, 2, xOff + 18 + 28, yOff + 8, 1, 1, 0, col[1, cl], 1);
            }
            
            // Name
            draw_set_color(col[!cl, (cl * 2) - (cl * !(hotBarArrangeMode mod 8 &lt; 4))]);
            
            wname = global.weaponName[w];
            dot = string_pos(" ", wname);
            if (dot)
            {
                wname = string_insert(".", string_delete(wname, 2, dot - 1), 2);
            }
            
            draw_text(xOff + 18, yOff, wname);
            draw_set_color(c_white);
        }
        else // draw the disabled stuff
        {
            draw_sprite_ext(sprPauseMenuWeaponDisabled, 0, xOff + 18, yOff, 1, 1, 0, c_white, 1);
        }
        
        yOff += wSep;
        if (i == 5)
        {
            xOff += 104;
            yOff = view_yview + 38;
        }
    }
    
    draw_set_halign(fa_left);
    
    // E-Tank
    draw_sprite_ext(sprETank, 2, x + etankPositionX, y + etankPositionY, 1, 1, 0, col[0, option == weaponVisibleN + 1], 1);
    draw_sprite_ext(sprETank, 4, x + etankPositionX, y + etankPositionY, 1, 1, 0, col[1, option == weaponVisibleN + 1], 1);
    
    draw_text(x + etankPositionX + 20, y + etankPositionY + 8, zeroPad(global.eTanks, 1));
    
    // W-Tank
    draw_sprite_ext(sprWTank, 2, x + wtankPositionX, y + wtankPositionY, 1, 1, 0, col[0, option == weaponVisibleN + 2], 1);
    draw_sprite_ext(sprWTank, 4, x + wtankPositionX, y + wtankPositionY, 1, 1, 0, col[1, option == weaponVisibleN + 2], 1);
    
    draw_text(x + wtankPositionX + 20, y + wtankPositionY + 8, zeroPad(global.wTanks, 1));
    
    // M-Tank
    draw_sprite_ext(sprMTank, 2, x + mtankPositionX, y + mtankPositionY, 1, 1, 0, col[0, option == weaponVisibleN + 3], 1);
    draw_sprite_ext(sprMTank, 4, x + mtankPositionX, y + mtankPositionY, 1, 1, 0, col[1, option == weaponVisibleN + 3], 1);
    
    draw_text(x + mtankPositionX + 20, y + mtankPositionY + 8, zeroPad(global.mTanks, 1));
    
    // Bolts
    draw_sprite_ext(sprBoltBig, 0, x + 24, y + 192, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprBoltBig, 1, x + 24, y + 192, 1, 1, 0, col[0, 1], 1);
    draw_sprite_ext(sprBoltBig, 2, x + 24, y + 192, 1, 1, 0, col[1, 1], 1);
    
    draw_text(x + 44, y + 200, zeroPad(global.bolts, 4));
    
    // Energy Elements
    draw_sprite_ext(sprEnergyElement, 0, x + 136, y + 178, 1, 1, 0, c_white, 1);
    
    draw_text(x + 156, y + 178 + 8, zeroPad(global.energyElements, 3));
    
    // item menu prompt
    draw_sprite_ext(sprButtonPrompts, 7, x + 130, y + 198, 1, 1, 0, c_white, 1);
    
    draw_text(x + 140, y + 198, "ITEMS");
    
    // colored text overlays
    if (global.showColoredTextOverlays)
    {
        draw_sprite_ext(sprDot, 0, view_xview[0] + 16, view_yview[0], view_wview[0] - 32, view_hview[0], 0,
            make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue),
            global.coloredTextOverlaysOpacity / 255);
    }
    
    draw_set_halign(fa_left);
    draw_set_color(c_white);
    
    draw_text_ext(x + 278, y + 178, itemDescription, 8, 212);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
