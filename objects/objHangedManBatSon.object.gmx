<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHangedManBatSon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

despawnRange = -1;
blockCollision = 0;
respawn = false;
itemDrop = -1;

image_speed = 0.3;

xspeed = 0;
yspeed = 0;
grav = 0;

parent = noone;
tx = x;
ty = y;
stationary = 1;
aimed = 0;
timer = 0;
ang = 0;
dist = 0;
batID = 0;

setTargetStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(parent))
    {
        if (stationary)
        {
            if (stationary == 1)
                dist+= ((dist &lt; 30) * 2);
            else
            {
                dist-= ((dist &gt; 0) * 2);
                if (dist &lt;= 0) instance_destroy();
            }
            x = parent.x + round(cos(degtorad(ang)) * dist);
            y = parent.y - 12 + round(sin(degtorad(ang)) * dist);
        }
    }
    if (aimed)
    {
        if (instance_exists(target))
        {
            tx = target.x;
            ty = target.y;
        }
        timer--;
        if (timer == 0)
        {
            playSFX(sfxBalladeShoot);
            aimAtPoint(4.2, tx, ty);
        }
    }
    if ((bbox_top &gt;= view_yview + 232 &amp;&amp; yspeed &gt; 0) ||
    (bbox_bottom &lt;= view_yview - 8 &amp;&amp; yspeed &lt; 0) ||
    (bbox_left &gt;= view_xview + 256 &amp;&amp; xspeed &gt; 0) ||
    (bbox_right &lt;= view_xview &amp;&amp; xspeed &lt; 0))
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
