<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

phase = 0; // 0: increasing the black rectangle's alpha

option = 0;
oldOption = 0;
weaponOffset = 0;
offsetTimer = -1;

// get currently visible weapons
weaponVisibleN = 0;
for (var i = 0; i &lt;= global.totalWeapons; i++)
{
    if (global.weaponLocked[global.weaponHotbar[i]] &lt; 2)
    {
        weaponVisible[weaponVisibleN++] = i;
    }
}
visibleWeapons = min(10, weaponVisibleN); // up to 10 visible

for (var i = 0; i &lt; weaponVisibleN; i++)
{
    if (global.weapon[0] == global.weaponHotbar[weaponVisible[i]])
    {
        option = i;
        oldOption = i;
    }
}
woption = i;

visibleWeapons = 10;

oldWeapon = global.weapon[0];
resetWeapon = false; // Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened?

wtank = 0;
mtank = 0;

exitConfirm = 0;
hotBarArrangeMode = false;

playerID = 0;
costumeID = 0;

itemRow = 0;
rowOffset = 0;
rowOffsetMoveDir = 1;

itemCursorImg = 0;

itemName = "N/A";
itemDescription = "???";

swapStoreOption = 0;

// Stop charging
with (objMegaman)
{
    playerPalette();
}

// set these here. makes everyone's lives easier.

etankPositionX = 16;
etankPositionY = 16;
wtankPositionX = 48;
wtankPositionY = 16;
mtankPositionX = 80;
mtankPositionY = 16;

optionsPositionX = 112;
optionsPositionY = 15;
checkPositionX = 126;
checkPositionY = 214;
exitPositionX = 112;
exitPositionY = 33;

arrowTimer = 20;

quickScrollTimer = 0; // 24;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Can't control while options menu is open
if (instance_exists(objOptionsMenu))
{
    exit;
}
// do pause menu
switch (phase)
{
    // Fading out
    case 0:
        with (objGlobalControl)
        {
            if (fadeAlpha == 1)
            {
                global.nextRoom = 0;
                other.visible = 1;
                other.phase = 1;
                showhealth = 0;
            }
        }
        break;
    
    // Fading in
    case 1:
        with (objGlobalControl)
        {
            if (fadeAlpha == 0)
            {
                other.phase = 2;
            }
        }
        event_user(0); // Moving the selection
        
        break;
    
    // Idle
    case 2:
        event_user(0); // Moving the selection

        // Select the weapon/tank
        if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID])
        {
            if (option &lt;= weaponVisibleN)
            {
                if (instance_exists(objMegaman.vehicle) &amp;&amp; option != 0)
                {
                    if (!objMegaman.vehicle.weaponsAllowed)
                    {
                        playSFX(sfxError);
                        exit;
                    }
                }
                    
                global.nextRoom = -1;
                phase = 3;
                    
                global.weapon[playerID] = global.weaponHotbar[weaponVisible[option]];
                playSFX(sfxMenuSelect);
            }
            else if (option == weaponVisibleN + 1) // E-Tank
            {
                if (global.eTanks &amp;&amp; global.playerHealth[playerID] &lt; 28)
                {
                    option = 99; // Nothing selected
                    phase = 5;
                    wtank = 0;
                    mtank = 0;
                    global.eTanks -= 1;
                    eTankTimer = 0;
                    loopSFX(sfxEnergyRestore);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
            else if (option == weaponVisibleN + 2) // W-Tank
            {
                // Check if weapon energy actually needs filling
                var proceed;
                proceed = false;
                for (i = 0; i &lt; weaponVisibleN; i += 1)
                {
                    if (ceil(global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]]) &lt; 28
                    &amp;&amp; !global.weaponLocked[i])
                    {
                        proceed = true;
                    }
                }
                    
                if (global.wTanks &amp;&amp; proceed)
                {
                    option = 0; // Go back to weapon column
                    phase = 6;
                    mtank = 0;
                    wtank = 1;
                    global.wTanks -= 1;
                    playSFX(sfxMenuSelect);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
            else if (option == weaponVisibleN + 3) // M-Tank
            {
                if (global.mTanks &gt; 0) // Check if health or weapon energy actually needs filling
                {
                    var proceed = false;
                    for (i = 0; i &lt; weaponVisibleN; i += 1)
                    {
                        if (ceil(global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]]) &lt; 28)
                        {
                            proceed = true;
                        }
                    }
                        
                    if (ceil(global.playerHealth[playerID]) &lt; 28)
                    {
                        proceed = true;
                    }
                        
                    if (proceed) // If proceed is still false after the past calculations, it seems there is nothing to fill
                    {
                        option = 99; // Nothing selected
                        phase = 5;
                        mtank = 1;
                        wtank = 0;
                        global.mTanks -= 1;
                        eTankTimer = 0;
                        loopSFX(sfxEnergyRestore);
                    }
                    else
                    {
                        playSFX(sfxError);
                    }
                }
                else
                {
                    playSFX(sfxError);
                }
            }
            else if (option == weaponVisibleN + 4) // Options
            {
                instance_create(x, y, objOptionsMenu);
                playSFX(sfxMenuSelect);
                exit;
            }
            /*else if (option == weaponVisibleN + 6) // Retry
            {
                    if (!retryConfirm)
                    {
                        retryConfirm = true;
                        playSFX(sfxMenuSelect);
                        exit;
                    }
            }*/
            else if (option == weaponVisibleN + 5) // Exit
            {
                if (!exitConfirm)
                {
                    exitConfirm = true;
                    playSFX(sfxMenuSelect);
                    exit;
                }
            }
        }

        // Confirming exit
        if (exitConfirm &amp;&amp; !global.nextRoom)
        {
            if (option == weaponVisibleN + 6)
            {
                if (global.keyJumpPressed[playerID]
                    || global.keyPausePressed[playerID])
                {
                    returnFromLevel(true, true);
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                exitConfirm = false;
            }
        }
        
        // Confirming retry
        /*if (retryConfirm &amp;&amp; !global.nextRoom)
        {
            if (option == weaponVisibleN + 5)
            {
                if (global.keyJumpPressed[playerID]
                    || global.keyPausePressed[playerID])
                {
                    global.nextRoom = room;
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                retryConfirm = false;
            }
        }*/
        
        break;
    
    // Fading out
    case 3:
        with (objGlobalControl)
        {
            if (fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
            {
                showhealth = 1;
                with (other)
                {
                    if (resetWeapon)
                    {
                        global.weapon[playerID] = oldWeapon;
                        with (objMegaman)
                        {
                            playerPalette();
                        }
                    }
                    
                    if (global.weapon[playerID] != oldWeapon)
                    {
                        with (prtPlayerProjectile)
                        {
                            instance_destroy();
                        }
                    }
                    
                    global.nextRoom = 0;
                    visible = 0;
                }
            }
            else if (fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
            {
                with (other)
                {
                    audio_resume_all();
                    instance_destroy();
                    global.frozen = 0;
                }
            }
        }
        
        break;
    
    // E/M-Tank restoring health
    case 5:
        eTankTimer += 1;
        if (eTankTimer &gt;= 3)
        {
            eTankTimer = 0;
            
            var proceed;
            proceed = false;
            
            // Fill selected weapon w/ W Tank
            if (wtank)
            {
                if (global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] &lt; 28)
                {
                    global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] = min(28,
                        global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] + 1);
                    proceed = true;
                }
            }
            
            // Fill all weapons - M-Tank only
            if (mtank)
            {
                for (i = 1; i &lt; weaponVisibleN; i += 1)
                {
                    if (global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]] &lt; 28)
                    {
                        global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]] = min(28,
                            global.ammo[playerID, global.weaponHotbar[weaponVisible[i]]] + 1);
                        proceed = true;
                    }
                }
            }
            
            // Fill health
            if ((global.playerHealth[playerID] &lt; 28) &amp;&amp; (!wtank))
            {
                global.playerHealth[playerID] = min(28,
                    global.playerHealth[playerID] + 1);
                proceed = true;
            }
            
            if (!proceed)
            {
                eTankTimer = 0;
                phase = 2;
                if (!wtank)
                {
                    option = oldOption;
                    global.weapon[playerID] = oldWeapon;
                    with (objMegaman)
                    {
                        playerPalette();
                    }
                }
                
                audio_stop_sound(sfxEnergyRestore);
            }
        }
        
        break;
    
    // W-Tank weapon selection
    case 6:
        event_user(0); // Moving the selection
        
        if (option &gt; 0 &amp;&amp; option &lt; weaponVisibleN)
        {
            if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID])
            {
                if (global.ammo[playerID, global.weaponHotbar[weaponVisible[option]]] &lt; 28)
                {
                    phase = 5;
                    eTankTimer = 0;
                    loopSFX(sfxEnergyRestore);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
        }
        
        break;
}

// update stored player sprite
if (instance_exists(objMegaman))
{
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            other.costumeID = costumeID;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//hotBarArrangeMode = (global.keyShoot[playerID]) * (hotBarArrangeMode + 1);
hotBarArrangeMode = false;

var xDir = (global.keyRightPressed[playerID] - global.keyLeftPressed[playerID]);
var yDir = (global.keyDownPressed[playerID]) - (global.keyUpPressed[playerID]);

var emergencyPass = false;
if (option &lt; weaponVisibleN)
{
    if (global.weaponLocked[global.weaponHotbar[weaponVisible[option]]])
        emergencyPass = true;
}
    
if (yDir != 0 || emergencyPass)
{
    if (!emergencyPass)
        playSFX(sfxMenuMove);
    
    // Weeapons
    if (option &lt; weaponVisibleN)
    {
        woption = option;
        
        if (hotBarArrangeMode) // swap weapons:
        {
            if (option + yDir &lt; weaponVisibleN &amp;&amp; option + min(yDir, 0) &gt;= 1)
            {
                option += yDir;
                swap(global.weaponHotbar, weaponVisible[option], weaponVisible[option - yDir]);
            }
        }
        else
        {
            do
            {
                if (emergencyPass)
                    option --;
                else
                    option += yDir;
                
                // wtanks......
                if (phase == 6)
                {
                    if (option == 4 &amp;&amp; yDir &lt; 0)
                        option = weaponVisibleN - 1;
                    else if (option == 5 &amp;&amp; yDir &gt; 0)
                        option = 0;
                    else if (option &gt;= weaponVisibleN)
                        option = 6;
                    else if (option &lt; 0)
                        option = 5;
                }
                else
                {
                    if (option == 4 &amp;&amp; yDir &lt; 0)
                        option = weaponVisibleN + 5;
                    else if (option == 5 &amp;&amp; yDir &gt; 0)
                        option = weaponVisibleN + 1;
                    else if (option &gt;= weaponVisibleN)
                        option = weaponVisibleN + 4;
                    else if (option &lt; 0)
                        option = weaponVisibleN + 1;
                }
            }
                until (option &gt;= weaponVisibleN || !global.weaponLocked[global.weaponHotbar[weaponVisible[option]]]);
        }
    }
    // Tanks or buttons
    else
    {
        if (option == weaponVisibleN + 4 &amp;&amp; yDir &lt; 0)
            option = weaponVisibleN - 1;
        else if (option &gt;= weaponVisibleN + 1 &amp;&amp; option &lt;= weaponVisibleN + 3)
        {
            if (yDir &lt; 0)
                option = 4;
            else
                option = 0;
        }
        else if (option == weaponVisibleN + 5 &amp;&amp; yDir &gt; 0)
            option = 5;
        else
            option += yDir;
    }
}

if (xDir != 0)
{   
    if (option &lt; weaponVisibleN) // horizontal movements while on the weapon list
    {
        //option = weaponVisibleN + 2 - xDir;
        if (option &lt; 5)
        {
            playSFX(sfxMenuMove);
            option += 6;
        }
        else if (option &gt;= 6)
        {
            playSFX(sfxMenuMove);
            option -= 6;
        }
            
        // a
        while (global.weaponLocked[global.weaponHotbar[weaponVisible[option]]])
        {
            option += xDir;
                
            if (option &lt; 0)
            {
                option = weaponVisibleN + 1;
                exit;
            }
            else if (option &gt;= weaponVisibleN)
            {
                option = weaponVisibleN + 4;
                exit;
            }
        }
    }
    else // horizontal movements while on the misc selections
    {
        playSFX(sfxMenuMove);
        if (option == weaponVisibleN + 1 &amp;&amp; xDir &lt; 0)
            option = weaponVisibleN + 4;
        else if (option &gt;= weaponVisibleN + 4)
        {
            if (xDir &lt; 0)
                option = weaponVisibleN + 3;
            else
                option = weaponVisibleN + 1;
        }
        else
        {
            option += xDir;
        }
    }
}

// Set weapon
global.weapon[playerID] = 0;
if (option &lt; weaponVisibleN)
{
    global.weapon[playerID] = global.weaponHotbar[weaponVisible[option]];
}

with (objMegaman)
{
    playerPalette();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// center in screen on nonstandard resolutions
x = view_xview + (view_wview[0] - 256) / 2;
y = view_yview + (view_hview[0] - 240) / 2;

// Menu
if (phase != 0)
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    draw_clear(c_black);
    
    var col;
    col[0, 0] = global.nesPalette[0];
    col[1, 0] = global.nesPalette[13];
    col[0, 1] = global.primaryCol[0];
    col[1, 1] = global.secondaryCol[0];
    col[0, 2] = make_color_rgb(255, 228, 164);
    col[1, 2] = c_white;
    
    if (option &lt; weaponVisibleN)
    {
        weaponOffset = clamp(option - floor(visibleWeapons * 0.5), 0, weaponVisibleN - visibleWeapons - 1);
    }
    
    if (abs(weaponOffset - offsetTimer) &lt; 0.05 || offsetTimer &lt; 0)
    {
        offsetTimer = weaponOffset;
    }
    offsetTimer += (weaponOffset - offsetTimer) / 8;
    
    // draw itself
    draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, c_white, 1);
    if (option != 0 &amp;&amp; option &lt; weaponVisibleN)
    {
        /*var primaryColShade, secondaryColShade, gemColor;
        switch (option)
        {
            case 1:
                primaryColShade = make_color_rgb(0, 120, 0);
                secondaryColShade = make_color_rgb(172, 124, 0);
                gemColor = make_color_rgb(0, 120, 248);
                break;
            case 2:
                primaryColShade = make_color_rgb(0, 0, 188);
                secondaryColShade = make_color_rgb(0, 136, 136);
                gemColor = make_color_rgb(228, 0, 88);
                break;
            case 3:
                primaryColShade = make_color_rgb(203, 73, 8);
                secondaryColShade = make_color_rgb(172, 124, 0);
                gemColor = make_color_rgb(0, 184, 0);
                break;
        }
        draw_sprite_ext(sprite_index, 1, x, y, 1, 1, 0, col[0, 1], 1);
        draw_sprite_ext(sprite_index, 2, x, y, 1, 1, 0, primaryColShade, 1);
        draw_sprite_ext(sprite_index, 3, x, y, 1, 1, 0, col[1, 1], 1);
        draw_sprite_ext(sprite_index, 4, x, y, 1, 1, 0, secondaryColShade, 1);
        draw_sprite_ext(sprite_index, 5, x, y, 1, 1, 0, gemColor, 1);*/
    }
    
    // Options
    draw_sprite_ext(sprOptionsIcon, (option == weaponVisibleN + 4), x + optionsPositionX, y + optionsPositionY, 1, 1, 0, c_white, 1);
    
    // Checkpoint
    //draw_sprite_ext(sprGotoCheckpoint, (option == weaponVisibleN + 5) + retryConfirm * 2, x + checkPositionX, y + checkPositionY, 1, 1, 0, c_white, 1);

    // Exit
    draw_sprite_ext(sprExitIcon, (option == weaponVisibleN + 5) + exitConfirm * 2, x + exitPositionX, y + exitPositionY, 1, 1, 0, c_white, 1);

    // Icons, ammo bars and names
    var wSep = 21; // Seperation between icons
    
    var xOff = view_xview + 20;
    var yOff = view_yview + 119;
    
    draw_set_halign(fa_left);
    for (i = 0; i &lt; weaponVisibleN; i++)
    {
        var w = global.weaponHotbar[weaponVisible[i]];
        var cl = (option == i);
        
        // Icon
        draw_sprite_ext(global.weaponIcon[w], 0, xOff, yOff, 1, 1, 0, col[!cl, 2], 1);
        draw_sprite_ext(global.weaponIcon[w], 1, xOff, yOff, 1, 1, 0, col[0, cl], 1);
        draw_sprite_ext(global.weaponIcon[w], 2, xOff, yOff, 1, 1, 0, col[1, cl], 1);
        draw_sprite_ext(global.weaponIcon[w], 3, xOff, yOff, 1, 1, 0, col[1, 2], cl);
        
        if (!global.weaponLocked[w])
        {
            // Drawing ammo bars
            ammo = ceil(global.playerHealth[playerID] * (i == 0) + global.ammo[playerID, w] * (i != 0));
            
            draw_sprite_ext(sprPauseMenuBarPrimary, ammo, xOff + 18, yOff + 8, 1, 1, 0, col[0, cl * (1 + (i == 0))], 1);
            draw_sprite_ext(sprPauseMenuBarSecondary, ammo, xOff + 18, yOff + 8, 1, 1, 0, col[1, cl * (1 + (i == 0))], 1);
            
            // Draw infinite energy mark over relevant bars
            if (global.infiniteEnergy[w])
            {
                draw_sprite_ext(sprInfinityMark, 0, xOff + 18 + 28, yOff + 8, 1, 1, 0, c_white, 1);
                draw_sprite_ext(sprInfinityMark, 1, xOff + 18 + 28, yOff + 8, 1, 1, 0, col[0, cl], 1);
                draw_sprite_ext(sprInfinityMark, 2, xOff + 18 + 28, yOff + 8, 1, 1, 0, col[1, cl], 1);
            }
            
            // Name
            draw_set_color(col[!cl, (cl * 2) - (cl * !(hotBarArrangeMode mod 8 &lt; 4))]);
            
            wname = global.weaponName[w];
            dot = string_pos(" ", wname);
            if (dot)
            {
                wname = string_insert(".", string_delete(wname, 2, dot - 1), 2);
            }
            
            draw_text(xOff + 18, yOff, wname);
            draw_set_color(c_white);
        }
        else // draw the disabled stuff
        {
            draw_sprite_ext(sprPauseMenuWeaponDisabled, 0, xOff + 18, yOff, 1, 1, 0, c_white, 1);
        }
        
        yOff += wSep;
        if (i == 4)
        {
            xOff += 114;
            yOff = view_yview + 99;
        }
    }
    
    draw_set_halign(fa_left);
    
    // E-Tank
    draw_sprite_ext(sprETank, 2, x + etankPositionX, y + etankPositionY, 1, 1, 0, col[0, option == weaponVisibleN + 1], 1);
    draw_sprite_ext(sprETank, 4, x + etankPositionX, y + etankPositionY, 1, 1, 0, col[1, option == weaponVisibleN + 1], 1);
    
    draw_text(x + etankPositionX + 20, y + etankPositionY + 8, zeroPad(global.eTanks, 1));
    
    // W-Tank
    draw_sprite_ext(sprWTank, 2, x + wtankPositionX, y + wtankPositionY, 1, 1, 0, col[0, option == weaponVisibleN + 2], 1);
    draw_sprite_ext(sprWTank, 4, x + wtankPositionX, y + wtankPositionY, 1, 1, 0, col[1, option == weaponVisibleN + 2], 1);
    
    draw_text(x + wtankPositionX + 20, y + wtankPositionY + 8, zeroPad(global.wTanks, 1));
    
    // M-Tank
    draw_sprite_ext(sprMTank, 2, x + mtankPositionX, y + mtankPositionY, 1, 1, 0, col[0, option == weaponVisibleN + 3], 1);
    draw_sprite_ext(sprMTank, 4, x + mtankPositionX, y + mtankPositionY, 1, 1, 0, col[1, option == weaponVisibleN + 3], 1);
    
    draw_text(x + mtankPositionX + 20, y + mtankPositionY + 8, zeroPad(global.mTanks, 1));
    
    // Bolts
    var ex = 18 * (!global.livesEnabled);
    draw_sprite_ext(sprBoltBig, 0, x + 16 + ex, y + 31, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprBoltBig, 1, x + 16 + ex, y + 31, 1, 1, 0, col[0, 1], 1);
    draw_sprite_ext(sprBoltBig, 2, x + 16 + ex, y + 31, 1, 1, 0, col[1, 1], 1);
    
    draw_text(x + 36 + ex, y + 39, zeroPad(global.bolts, 4));
    
    // Lives
    if (global.livesEnabled)//global.livesRemaining
    {
        with (objMegaman)
        {
            if (playerID == other.playerID)
            {
                drawPlayer(playerID, costumeID, 16, 12, other.x + 88, other.y + 36, 1, 1);
            }
        }
        draw_text(x + 100, y + 38, global.livesRemaining);
    }
    // draw BASS
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            drawPlayer(playerID, costumeID, 0, 0, other.x + 132, other.y + 64, 1, 1);
        }
    }

    draw_text(x + 20, y + 102, "WEAPON SELECT");

    // colored text overlays
    if (global.showColoredTextOverlays)
    {
        draw_sprite_ext(sprDot, 0, view_xview[0] + 16, view_yview[0], view_wview[0] - 32, view_hview[0], 0,
            make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue),
            global.coloredTextOverlaysOpacity / 255);
    }
    
    draw_set_halign(fa_left);
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
