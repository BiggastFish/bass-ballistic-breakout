<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAccessibilityMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2004</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

if (!instance_number(object_index) &gt; 1)
{
    instance_destroy();
    visible = 0;
    exit;
}

cursorImgIndex = 0;
cursorImgSpd = 0.2;

phase = 0;
option = 0;
selected = 0;
buffer = 0;

visibleOptions = 7;
optionOffset = 0;

verticalQuickScrollTimer = 25;
horizontalQuickScrollTimer = 25;

// Control settings
newControls = 0;
current = 'NONE';
press = 1;

// Option text
optionText[0] = 'BACK';
optionText[1] = 'BG VISIBILITY:';
optionText[2] = 'CHECKPOINT AMOUNT:';
optionText[3] = 'DAMAGE TAKEN:';
optionText[4] = 'DAMAGE DEALT:';
optionText[5] = 'QUICKSWITCH ICON:';
optionText[6] = 'SPIKE DAMAGE:';
optionText[7] = 'PIT DAMAGE:';
optionText[8] = 'DASH INPUT:';
optionText[9] = 'RESET TO DEFAULTS';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior
switch (phase)
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
            with instance_create(x, y, objParallax)
            {
                myBG = bgAccessibilityBG;
                moveInMenu = true;
                yspeed = -1;
                areaLeft = view_xview;
                areaRight = view_xview + view_wview;
                areaTop = view_yview;
                areaBottom = view_yview + view_hview;
                depth = other.depth + 1;
            }
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
        {
            phase++;
        }
        break;
    
    // Doing menu selections
    case 2: // done elsewhere 
        break;
    
    // Fading out
    case 3:
        global.nextRoom = -1;
        phase++;
        break;
    
    // End fading out
    case 4:
        if (objGlobalControl.fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
        {
            global.nextRoom = 0;
            visible = 0;
            with (objParallax)
            {
                if (depth == other.depth + 1)
                {
                    instance_destroy();
                }
            }
        }
        else if (objGlobalControl.fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
        {
            global.frozen = true;
            instance_destroy();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Most menu selections
if (phase == 2 &amp;&amp; !selected)
{
    // var maxplayers = min(4+gamepad_get_device_count(),4);
    
    // left / right controlled selections
    dir = (global.keyRightPressed[0] || (global.keyRight[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0)) - (global.keyLeftPressed[0] || (global.keyLeft[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0));
    if (dir != 0)
    {
        switch (option)
        {
            // BG Visibility
            case 1:
                pre = global.bgVisibility;
                global.bgVisibility = max(0, min(100, global.bgVisibility + 10 * dir));
                if (global.bgVisibility != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;

            // Checkpoint Amount
            case 2:
                pre = global.checkpointAmount;
                global.checkpointAmount = max(0, min(3, global.checkpointAmount + dir));
                if (global.checkpointAmount != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;

            // Damage Taken
            case 3:
                pre = global.damageTakenMultiplier;
                global.damageTakenMultiplier = clamp(floor(global.damageTakenMultiplier + dir), 0.5, 2);
                if (global.damageTakenMultiplier != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Damage Dealt
            case 4:
                pre = global.damageDealtMultiplier;
                global.damageDealtMultiplier = clamp(floor(global.damageDealtMultiplier + dir), 0.5, 2);
                if (global.damageDealtMultiplier != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Quickswitch Icon
            case 5:
                pre = global.showQuickswitch;
                global.showQuickswitch = min(max(0, global.showQuickswitch + dir), 1);
                if (global.showQuickswitch != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Spike Behavior
            case 6:
                pre = global.spikeBehavior;
                global.spikeBehavior = max(0, min(3, global.spikeBehavior + dir));
                if (global.spikeBehavior != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Pit Behavior
            case 7:
                pre = global.pitBehavior;
                global.pitBehavior = max(0, min(2, global.pitBehavior + dir));
                if (global.pitBehavior != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;

            // Dash Behavior
            case 8:
                pre = global.dashBehavior;
                global.dashBehavior = max(0, min(2, global.dashBehavior + dir));
                if (global.dashBehavior != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
        }
    }
    
    // pause controlled selections
    if (global.keyPausePressed[0])
    {
        switch (option)
        {
            // exit
            case 0:
                selected = true;
                phase++;
                playSFX(sfxMenuSelect);
                break;
            case 9:
                global.bgVisibility = 100;
                global.checkpointAmount = 3;
                global.damageTakenMultiplier = 1; 
                global.damageDealtMultiplier = 1;
                global.showQuickswitch = 1;
                global.spikeBehavior = 1;
                global.pitBehavior = 0;
                global.dashBehavior = 2;
                playSFX(sfxBassBloop);
                break;
        }
    }
    
    // Up / down controls
    if (global.keyUpPressed[0] || (global.keyUp[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
    {
        // up
        option -= 1;
        if (option &lt; 0)
        {
            // loop
            option = array_length_1d(optionText) - 1;
            optionOffset = array_length_1d(optionText) - visibleOptions;
        }
        else if (option &lt; optionOffset)
        {
            optionOffset--;
        }
        
        playSFX(sfxMenuMove);
    }
    else if (global.keyDownPressed[0] || (global.keyDown[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
    {
        // down
        option += 1;
        if (option &gt;= array_length_1d(optionText))
        {
            // loop
            option = 0;
            optionOffset = 0;
        }
        else if (option &gt;= optionOffset + visibleOptions)
        {
            optionOffset++;
        }
        
        playSFX(sfxMenuMove);
    }
    
    // vertical quick scroll timer handling
    if (horizontalQuickScrollTimer == 25 // don't quick scroll vertically if doing it horizontally
    &amp;&amp; (global.keyUp[0] ^^ global.keyDown[0]) // only activate quick scroll if one button is being held
    &amp;&amp; !(option &lt;= 0 &amp;&amp; global.keyUp[0]) &amp;&amp; !(option &gt;= array_length_1d(optionText) - 1 &amp;&amp; global.keyDown[0])) // don't wrap around with quick scroll
    {
        if (verticalQuickScrollTimer &lt;= 0)
        {
            // slight pause between scrolls
            verticalQuickScrollTimer = 9;
        }
        
        verticalQuickScrollTimer--;
    }
    else
    {
        verticalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    }
    
    // horizontal quick scroll timer handling
    if (verticalQuickScrollTimer == 25 // don't quick scroll horizontally if doing it vertically
    &amp;&amp; (global.keyLeft[0] ^^ global.keyRight[0]))
    {
        if (horizontalQuickScrollTimer &lt;= 0)
        {
            // slight pause between scrolls
            horizontalQuickScrollTimer = 9;
        }
        
        horizontalQuickScrollTimer--;
    }
    else
    {
        horizontalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

// center display on non-standard resolutions
drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
drawYPosition = view_yview[0] + view_hview[0] / 2 - 120;

// draw menu bg
draw_sprite(sprite_index, 0, drawXPosition, drawYPosition);

// animate cursor
cursorImgIndex += cursorImgSpd;
if (cursorImgIndex &gt;= 5)
{
    cursorImgIndex -= 5;
}

// draw cursor
draw_sprite(sprOptionsCursor, cursorImgIndex, drawXPosition + 24, drawYPosition + 45 + (option) * 16 - (optionOffset) * 16);

// draw arrows
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

draw_text(drawXPosition + 128, drawYPosition + 20, "GAME &amp; ACCESSIBILITY");

if (optionOffset != 0)
{
    draw_sprite(sprAccessibilityArrows, 0, drawXPosition + 128, drawYPosition + 36);
}

if (optionOffset != array_length_1d(optionText) - visibleOptions)
{
    draw_sprite(sprAccessibilityArrows, 1, drawXPosition + 128, drawYPosition + 149);
}


// draw options
draw_set_halign(fa_left);
draw_set_valign(fa_top);

for (var j = 0; j &lt; visibleOptions; j++)
{
    var tc, oS; 
        tc[0] = c_white; 
        tc[1] = make_color_rgb(248, 152, 56);
        oS = ((j == 0 &amp;&amp; optionOffset == 0) || (j == 6 &amp;&amp; optionOffset == 3));
    draw_text_ext_colour(drawXPosition + 30, drawYPosition + 45 + j * 16, optionText[optionOffset + j], 16, 256,
    tc[oS], tc[oS], tc[oS], tc[oS], 1);
}

// draw current option status'
opt = '';
for (var j = 0; j &lt; visibleOptions; j++)
{
    switch (optionOffset + j)
    {
        // BG Visibility
        case 1:
            opt += string(global.bgVisibility) + '%';
            
            break;
            
        // Checkpoint Amount
        case 2:
            if (global.checkpointAmount)
            {
                opt += string(global.checkpointAmount);
            }
            else
            {
                opt += 'NONE';
            }
            
            break;
        
        // Damage Taken
        case 3:
            switch (global.damageTakenMultiplier)
            {
                case 0.5:
                    opt += 'HALF';
                    break;
                case 1:
                    opt += 'NORMAL';
                    break;
                case 2:
                    opt += 'DOUBLE';
                    break;
            }
            
            break;

        // Damage dealth
        case 4:
            switch (global.damageDealtMultiplier)
            {
                case 0.5:
                    opt += 'HALF';
                    break;
                case 1:
                    opt += 'NORMAL';
                    break;
                case 2:
                    opt += 'DOUBLE';
                    break;
            }
            
            break;

        // quickswitch icon
        case 5:
            if (global.showQuickswitch)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // spike behavior
        case 6:
            switch (global.spikeBehavior)
            {
                case 0:
                    opt += 'MM1';
                    break;
                case 1:
                    opt += 'MM2';
                    break;
                case 2:
                    opt += 'HALF';
                    break;
                case 3:
                    opt += 'QUARTER';
                    break;
            }
            
            break;

        // pit behavior
        case 7:
            switch (global.pitBehavior)
            {
                case 0:
                    opt += 'NORMAL';
                    break;
                case 1:
                    opt += 'HALF';
                    break;
                case 2:
                    opt += 'QUARTER';
                    break;
            }
            
            break;

        // dash behavior
        case 8:
            switch (global.dashBehavior)
            {
                case 0:
                    opt += 'BUTTON';
                    break;
                case 1:
                    opt += 'DOUBLE TAP';
                    break;
                case 2:
                    opt += 'BOTH';
                    break;
            }
            
            break;
    }
    
    // next line
    opt += '#';
}

var orange = make_color_rgb(248, 152, 56);
draw_set_halign(fa_right);
draw_text_ext_colour(drawXPosition + 232, drawYPosition + 45 , opt, 16, 256,
    orange, orange, orange, orange, 1);

dopt = '';
if (option != 0)
{
    switch (option)
    {
        // BG Visibility
        case 1:
            draw_sprite_ext(sprAccessibilityVisual, 0, drawXPosition + 19, drawYPosition + 165,
            1, 1, 0, c_white, global.bgVisibility / 100);
            draw_sprite(sprAccessibilityVisual, 1, drawXPosition + 19, drawYPosition + 165);
            dopt = 'VISIBILITY OF#BACKGROUND ELEMENTS#PRESENT IN STAGES##(CERTAIN BG ASPECTS#WILL STILL BE#VISIBLE REGARDLESS#OF SETTINGS)';
            break;
        
        // Toggle Autofire
        case 2:
            draw_sprite(sprAccessibilityVisual, 2 + floor(global.checkpointAmount), drawXPosition + 19, drawYPosition + 165)
            dopt = 'AMOUNT OF#CHECKPOINTS#AVAILABLE IN#A STAGE';
            break;

        // Damage Taken
        case 3:
            draw_sprite(sprAccessibilityVisual, 6 + floor(global.damageTakenMultiplier), drawXPosition + 19, drawYPosition + 165)
            dopt = 'AMOUNT OF DAMAGE#ENEMIES AND#ENEMY PROJECTILES#DEAL TO THE#PLAYER';
            break;

        // Damage Dealt
        case 4:
            draw_sprite(sprAccessibilityVisual, 9 + floor(global.damageDealtMultiplier), drawXPosition + 19, drawYPosition + 165)
            dopt = 'AMOUNT OF DAMAGE#ENEMIES TAKE#FROM PLAYER#PROJECTILES';
            break;

        // Quickswitch Icon
        case 5:
            draw_sprite(sprAccessibilityVisual, 12 + floor(global.showQuickswitch), drawXPosition + 19, drawYPosition + 165)
            dopt = 'SETS THE WEAPON#ICON ABOVE THE#PLAYER TO BE#VISIBLE WHEN#QUICKSWITCHING#WEAPONS';
            break;

        // Spike Behavior
        case 6:
            draw_sprite(sprAccessibilityVisual, 14 + floor(global.spikeBehavior), drawXPosition + 19, drawYPosition + 165)
            dopt = 'AMOUNT OF DAMAGE#SPIKES DEAL#TO THE PLAYER';
            break;
        
        // Pit Behavior
        case 7:
            draw_sprite(sprAccessibilityVisual, 18 + floor(global.pitBehavior), drawXPosition + 19, drawYPosition + 165)
            dopt = 'AMOUNT OF DAMAGE#PITS DEAL TO#THE PLAYER##(NON-LETHAL DAMAGE#BOUNCES UP THE#PLAYER FROM#THE PIT)';
            break;

        // Dash Input
        case 8:
            draw_sprite(sprAccessibilityVisual, 21 + floor(global.dashBehavior), drawXPosition + 19, drawYPosition + 165)
            dopt = 'INPUTS REQUIRED#FOR ACTIVATING#A DASH';
            break;
    }
    draw_set_halign(fa_left);
    draw_text(drawXPosition + 83, drawYPosition + 165 , dopt);
}



// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    draw_rectangle(drawXPosition + 28, drawYPosition + 36, drawXPosition + view_wview[0] - 28, drawYPosition + view_hview[0] - 36, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
