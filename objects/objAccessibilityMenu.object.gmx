<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAccessibilityMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

if (!instance_number(object_index) &gt; 1)
{
    instance_destroy();
    visible = 0;
    exit;
}

cursorImgIndex = 0;
cursorImgSpd = 0.2;

arrowBlinkTimer = 20;
showArrow = true;

phase = 0;
option = 0;
selected = 0;
buffer = 0;

visibleOptions = 6;
optionOffset = 0;

verticalQuickScrollTimer = 25;
horizontalQuickScrollTimer = 25;

// Control settings
newControls = 0;
current = 'NONE';
press = 1;

// Option text
optionText[0] = 'CLOSE';
optionText[1] = 'COLORED TEXT OVERLAYS';
optionText[2] = 'BG VISIBILITY';
optionText[3] = 'TOGGLE AUTOFIRE';
optionText[4] = 'DAMAGE TAKEN';
optionText[5] = 'DAMAGE DEALT';
optionText[6] = 'QUICKSWITCH ICON';
optionText[7] = 'SPIKE DAMAGE';
optionText[8] = 'DASH';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior
switch (phase)
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
        {
            phase++;
        }
        break;
    
    // Doing menu selections
    case 2: // done elsewhere 
        break;
    
    // Fading out
    case 3:
        if (room == rmOptions)
        {
            var ID;
            if (global.nextRoom != rmTitleScreen)
            {
                saveLoadOptions(true);
            }
            global.nextRoom = rmTitleScreen;
        }
        else
        {
            global.nextRoom = -1;
            phase++;
        }
        break;
    
    // End fading out
    case 4:
        if (objGlobalControl.fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
        {
            global.nextRoom = 0;
            visible = 0;
        }
        else if (objGlobalControl.fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
        {
            global.frozen = true;
            instance_destroy();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Most menu selections

if (instance_exists(objColoredTextOverlaysMenu))
{
    exit;
}

if (phase == 2 &amp;&amp; !selected)
{
    // var maxplayers = min(4+gamepad_get_device_count(),4);
    
    // left / right controlled selections
    dir = (global.keyRightPressed[0] || (global.keyRight[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0)) - (global.keyLeftPressed[0] || (global.keyLeft[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0));
    if (dir != 0)
    {
        switch (option)
        {
            // Screensize
            case 3:
                pre = global.screensize;
                setScreenSize(global.screensize + dir);
                if (global.screensize != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
    
            // Resolution
            case 4:
                global.resolution = !global.resolution;
                playSFX(sfxMenuMove);

                setScreenSize(global.screensize + window_get_fullscreen());
                break;

            // V-Sync
            case 5:
                global.vsync = !global.vsync;
                playSFX(sfxMenuMove);
                break;
            
            // Music volume
            case 6:
                pre = global.musicvolume;
                global.musicvolume = max(0, min(100, global.musicvolume + 10 * dir));
                
                // adjust current music volume to reflect change
                switch (global.levelSongType)
                {
                    default:
                    case "OGG":
                        FMODInstanceSetVolume(global.songMemory, global.musicvolume * 0.01);
                        break;
                    case "VGM":
                        if (instance_exists(objMusicControl))
                        {
                            audio_sound_gain(objMusicControl.sound_index, global.levelVolume * (global.musicvolume * 0.01), 0);
                        }
                        break;
                }
                if (global.musicvolume != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Sound volume
            case 7:
                pre = global.soundvolume;
                global.soundvolume = max(0, min(100, global.soundvolume + 10 * dir));
                if (global.soundvolume != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Players (co-op)
            case 8:
                pre = global.playerCount;
                global.playerCount = max(1, min(4, global.playerCount + dir));
                if (global.playerCount != pre)
                {
                    playSFX(sfxMenuMove);
                }
                if (global.playerCount &gt; pre)
                {
                    resetPlayerState(pre);
                    
                    // allow player to respawn:
                    global.respawnTimer[pre] = 0;
                }
                
                // delete removed players
                with (objMegaman)
                {
                    if (playerID &gt;= global.playerCount)
                    {
                        instance_destroy();
                    }
                }
                break;
            
            // FPS
            case 9:
                pre = global.showFPS;
                global.showFPS = min(max(0, global.showFPS + dir), 1);
                if (global.showFPS != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Controller Overlay
            case 10:
                pre = global.showControllerOverlay;
                global.showControllerOverlay = min(max(0, global.showControllerOverlay + dir), 2);
                if (global.showControllerOverlay != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Damage popup
            case 11:
                pre = global.damagePopup;
                global.damagePopup = min(max(0, global.damagePopup + dir), 1);
                if (global.damagePopup != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Charge Bar
            case 12:
                pre = global.chargeBar;
                global.chargeBar = min(max(0, global.chargeBar + dir), 1);
                if (global.chargeBar != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // MM Color
            case 13:
                pre = global.mmColor;
                global.mmColor = min(max(0, global.mmColor + dir), 1);
                if (global.mmColor != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // moving text effects
            case 14:
                pre = global.showMovingText;
                global.showMovingText = min(max(0, global.showMovingText + dir), 1);
                if (global.showMovingText != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Instant refills
            case 15:
                pre = global.healthEffect;
                global.healthEffect = min(max(0, global.healthEffect + dir), 1);
                if (global.healthEffect != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Escape key behavior
            case 16:
                pre = global.escapeBehavior;
                global.escapeBehavior = min(max(0, global.escapeBehavior - dir), 2);
                if (global.escapeBehavior != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            // BG visiblity
            case 18:
                pre = global.bgVisibility;
                global.bgVisibility = max(0, min(100, global.bgVisibility + dir));
                if (global.bgVisibility != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            // Toggle Autofire
            case 19:
                pre = global.autoFire;
                global.autoFire = min(max(0, global.autoFire + dir), 1);
                if (global.autoFire != pre)
                {
                    playSFX(sfxMenuMove);
                }
        }
    }
    
    // pause controlled selections
    var pausePressed = false;
    for (var i = 0; i &lt; global.playerCount; i++)
        if (global.keyPausePressed[i])
            pausePressed = i + 1;
    
    if (pausePressed)
    {
        switch (option)
        {
            // exit
            case 0:
                selected = true;
                phase++;
                playSFX(sfxMenuSelect);
                break;
            
            // set keyboard controls
            case 1:
                if (buffer)
                {
                    exit;
                }
                newControls = 1;
                selected = 1;
                current = 'LEFT';
                keyID=0;
                pID = pausePressed - 1;
                for(var i=0;i&lt;40;i++)
                    currentKeys[i]=-1;
                break;
            
            // set gamepad controls
            case 2:
                if (buffer)
                {
                    exit;
                }
                if (!objGlobalControl.joystick_connected)
                {
                    objGlobalControl.joystick_connected = gamepad_get_device_count() &gt; 0;
                }
                if (!objGlobalControl.joystick_connected)
                {
                    playSFX(sfxError);
                    exit;
                }
                newControls = 2;
                keyID=0;
                selected = 1;
                current = 'JUMP';
                pID = pausePressed - 1;
                for(var i=0;i&lt;40;i++)
                    currentKeys[i]=-1;
                break;
            
            // colored text overlays
            case 17:
                playSFX(sfxPause);
                instance_create(x, y, objColoredTextOverlaysMenu);
                break;
        }
    }
    
    // Up / down controls
    if (global.keyUpPressed[0] || (global.keyUp[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
    {
        // up
        option -= 1;
        if (option &lt; 0)
        {
            // loop
            option = array_length_1d(optionText) - 1;
            optionOffset = array_length_1d(optionText) - visibleOptions;
        }
        else if (option &lt; optionOffset)
        {
            optionOffset--;
        }
        
        playSFX(sfxMenuMove);
    }
    else if (global.keyDownPressed[0] || (global.keyDown[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
    {
        // down
        option += 1;
        if (option &gt;= array_length_1d(optionText))
        {
            // loop
            option = 0;
            optionOffset = 0;
        }
        else if (option &gt;= optionOffset + visibleOptions)
        {
            optionOffset++;
        }
        
        playSFX(sfxMenuMove);
    }
    
    // vertical quick scroll timer handling
    if (horizontalQuickScrollTimer == 25 // don't quick scroll vertically if doing it horizontally
    &amp;&amp; (global.keyUp[0] ^^ global.keyDown[0]) // only activate quick scroll if one button is being held
    &amp;&amp; !(option &lt;= 0 &amp;&amp; global.keyUp[0]) &amp;&amp; !(option &gt;= array_length_1d(optionText) - 1 &amp;&amp; global.keyDown[0])) // don't wrap around with quick scroll
    {
        if (verticalQuickScrollTimer &lt;= 0)
        {
            // slight pause between scrolls
            verticalQuickScrollTimer = 9;
        }
        
        verticalQuickScrollTimer--;
    }
    else
    {
        verticalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    }
    
    // horizontal quick scroll timer handling
    if (verticalQuickScrollTimer == 25 // don't quick scroll horizontally if doing it vertically
    &amp;&amp; (global.keyLeft[0] ^^ global.keyRight[0]))
    {
        if (horizontalQuickScrollTimer &lt;= 0)
        {
            // slight pause between scrolls
            horizontalQuickScrollTimer = 3;
        }
        
        horizontalQuickScrollTimer--;
    }
    else
    {
        horizontalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup controls
if (!newControls)
{
    exit;
}

// control configuration
key = -1;

// control configuration
var skip = newControls &amp;&amp; (keyboard_key == vk_delete);

if (newControls == 1)
{
    if (keyboard_check_pressed(vk_anykey))
    {
        // illegal keys
        key = keyboard_key;
        switch (key)
        {
            case vk_f1:
            case vk_f2:
            case vk_f3:
            case vk_f4:
            case vk_f5:
            case vk_f6:
            case vk_f7:
            case vk_f8:
            case vk_f9:
            case vk_f10:
            case vk_f11:
            case vk_f12:
            case vk_escape:
            case vk_alt:
            case vk_nokey:
            case vk_printscreen:
                exit;
        }
    }
    else
    {
        // no keys pressed
        press = 0;
    }
    
    event_user(0);
    
    if (key != -1 &amp;&amp; !press)
    {
        if(skip)
            key=-1;
        currentKeys[keyID + pID*10]=key;
        keyID++;
        // assign key
        press = 1;
        switch (current)
        {
            case 'LEFT':
                if(!skip)
                    global.leftKey[pID] = key;
                current = 'RIGHT';
                break;
            case 'RIGHT':
                if(!skip)
                    global.rightKey[pID] = key;
                current = 'UP';
                break;
            case 'UP':
                if(!skip)
                    global.upKey[pID] = key;
                current = 'DOWN';
                break;
            case 'DOWN':
                if(!skip)
                    global.downKey[pID] = key;
                current = 'JUMP';
                break;
            case 'JUMP':
                if(!skip)
                    global.jumpKey[pID] = key;
                current = 'SHOOT';
                break;
            case 'SHOOT':
                if(!skip)
                    global.shootKey[pID] = key;
                current = 'SLIDE';
                break;
            case 'SLIDE':
                if(!skip)
                    global.slideKey[pID] = key;
                current = 'PREV WPN';
                break;
            case 'PREV WPN':
                if(!skip)
                    global.weaponSwitchLeftKey[pID] = key;
                current = 'NEXT WPN';
                break;
            case 'NEXT WPN':
                if(!skip)
                    global.weaponSwitchRightKey[pID] = key;
                current = 'PAUSE';
                break;
            case 'PAUSE':
                if(!skip)
                    global.pauseKey[pID] = key;
                current = 'LEFT';
                pID += 1;
                if (pID &gt;= global.playerCount)
                {
                    selected = 0;
                    buffer = 1;
                    alarm[0] = 10;
                    newControls = 0;
                }
                
                break;
        }
        
        playSFX(sfxMenuMove);
    }
}

// gamepad configuration
if (newControls == 2)
{
    if (!objGlobalControl.joystick_connected)
    {
        newControls = 0;
        selected = 0;
        press = 1;
        buffer = 1;
        alarm[0] = 10;
        exit;
    }
    if(!skip)
    {
        var i, b;
        var jID = pID;
        if (!gamepad_is_connected(jID))
            jID += 4 - objGlobalControl.xinputDeviceCount;
        b = gamepad_button_count(jID);
        
        for (i = 0; i &lt; b; i += 1)
        {
            if (gamepad_button_check(jID, i))
            {
                key = i;
                break;
            }
        }
    }
    else
    {
        key=vk_delete;
    }
    if (key == -1)
    {
        press = 0;
    }
    else{
        event_user(0);
    }
    if (key != -1 &amp;&amp; !press)
    {
        if(skip)
            key=-1;
        currentKeys[keyID + pID*10]=key;
        keyID++;
        press = 1;
        switch (current)
        {
            case 'JUMP':
                if(!skip)
                    global.joystick_jumpKey[pID] = key;
                current = 'SHOOT';
                break;
            case 'SHOOT':
                if(!skip)
                    global.joystick_shootKey[pID] = key;
                current = 'SLIDE';
                break;
            case 'SLIDE':
                if(!skip)
                    global.joystick_slideKey[pID] = key;
                current = 'PREV WPN';
                break;
            case 'PREV WPN':
                if(!skip)
                    global.joystick_weaponSwitchLeftKey[pID] = key;
                current = 'NEXT WPN';
                break;
            case 'NEXT WPN':
                if(!skip)
                    global.joystick_weaponSwitchRightKey[pID] = key;
                current = 'PAUSE';
                break;
            case 'PAUSE':
                 if(!skip)
                    global.joystick_pauseKey[pID] = key;
                current = 'JUMP';
                pID += 1;
                if (pID &gt;= 1 &amp;&amp; gamepad_get_device_count() &gt; pID) // global.playerCount
                {
                    selected = 0;
                    buffer = 1;
                    alarm[0] = 10;
                    newControls = 0;
                }
                break;
        }
        
        playSFX(sfxMenuMove);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Validate inputs

if(key != -1 &amp;&amp; !press)
{
    for(var i=0;i&lt;10 &amp;&amp; currentKeys[i+pID*10]!=-1;i++)
    {
        if(currentKeys[i+pID*10]==key)
        {
            key=-1;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

// center display on non-standard resolutions
drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
drawYPosition = view_yview[0] + view_hview[0] / 2 - 120;

// draw menu bg
draw_sprite(sprite_index, 0, drawXPosition, drawYPosition);

// animate cursor
cursorImgIndex += cursorImgSpd;
if (cursorImgIndex &gt;= 5)
{
    cursorImgIndex -= 5;
}

// draw cursor
draw_sprite(sprOptionsCursor, cursorImgIndex, drawXPosition + 34, drawYPosition + 52 + (option) * 14 - (optionOffset) * 14);

// animate arrows
arrowBlinkTimer -= 1;
if (arrowBlinkTimer == 0)
{
    arrowBlinkTimer = 20;
    showArrow = !showArrow;
}

// draw arrows
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

draw_text(drawXPosition + 128, drawYPosition + 20, "GAME &amp; ACCESSIBILITY");


if (showArrow &amp;&amp; optionOffset != 0)
{
    draw_sprite(sprArrow, 2, drawXPosition + 128, drawYPosition + 56);
}

if (showArrow &amp;&amp; optionOffset != array_length_1d(optionText) - visibleOptions)
{
    draw_sprite(sprArrow, 3, drawXPosition + 128, drawYPosition + 198);
}

// draw options
draw_set_halign(fa_left);
draw_set_valign(fa_top);
for (var j = 0; j &lt; visibleOptions; j++)
{
    draw_text_ext(drawXPosition + 48, drawYPosition + 56 + j * 16, optionText[optionOffset + j], 16, 256);
}

// draw current option status'
opt = '';
for (var j = 0; j &lt; visibleOptions; j++)
{
    switch (optionOffset + j)
    {
        // BG Visibility
        case 2:
            opt += string(global.bgVisibility) + '%';
            
            break;
            
        // Toggle Autofire
        case 3:
            if (global.autoFire)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // Damage Taken
        case 4:
            switch (global.damageTakenMultiplier)
            {
                case 0.5:
                    opt += 'HALF';
                    break;
                case 1:
                    opt += 'NORMAL';
                    break;
                case 2:
                    opt += 'DOUBLE';
                    break;
            }
            
            break;

        // Damage dealth
        case 5:
            switch (global.damageDealtMultiplier)
            {
                case 0.5:
                    opt += 'HALF';
                    break;
                case 1:
                    opt += 'NORMAL';
                    break;
                case 2:
                    opt += 'DOUBLE';
                    break;
            }
            
            break;

        // quickswitch icon
        case 6:
            if (global.showQuickswitch == 1)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // spike behavior
        case 7:
            switch (global.spikeBehavior)
            {
                case 0:
                    opt += 'MM1';
                    break;
                case 1:
                    opt += 'MM2';
                    break;
                case 2:
                    opt += 'HALF';
                    break;
                case 3:
                    opt += 'QUARTER';
                    break;
            }
            
            break;

        // dash behavior
        case 8:
            switch (global.dashBehavior)
            {
                case 0:
                    opt += 'BUTTON';
                    break;
                case 1:
                    opt += 'DOUBLE TAP';
                    break;
                case 2:
                    opt += 'BUTTON/DOUBLE TAP';
                    break;
            }
            
            break;
    }
    
    // next line
    opt += '#';
}

draw_set_halign(fa_right);
draw_text_ext(drawXPosition + 232, drawYPosition + 56, opt, 16, 256);

// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    draw_rectangle(drawXPosition + 28, drawYPosition + 36, drawXPosition + view_wview[0] - 28, drawYPosition + view_hview[0] - 36, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
