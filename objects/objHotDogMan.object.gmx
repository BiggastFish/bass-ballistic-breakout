<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHotDogMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 160;
healthpoints = healthpointsStart;
grav = .2;
contactDamage = 4;
hitInvun = 4;
facePlayerOnSpawn = 1;
fried = 0;
fryTimer = 0;
spd = 0;
scrollSpeed = 0;
phase = 0;
introType = 0;
dropsDone = 0;
phaseArray[0] = 1;
phaseArray[1] = 2;
phaseArray[2] = 0;
phaseArray[3] = 1;
phaseArray[4] = 2;
phaseArray[5] = 0;
phaseArray[6] = 1;
phaseArrayDir = 1;
phasePick = 2 + irandom(2);
lastStationaryPhase = choose(3, 4);
tx = x;
ty = y;

// Music
music = "HoTDBoss.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicVolume = 0.8;
musicLoop = true;
musicLoopSecondsStart = 6.665;
musicLoopSecondsEnd = 70.655;

// Damage Tables
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objYamato, 3);
enemyDamageValue(objKnuckleSandwich, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (!global.frozen)
{
    // Starting the intro animation
    if (startIntro)
    {
        startIntro = false;
        isIntro = true;
        drawBoss = true;
    }
    else if (isIntro)
    {
        visible = 1;
        isIntro = false;
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        if (instance_exists(target))
        {
            tx = target.x;
            ty = target.y;
        }
        var yeah = view_xview + 128;
        fryTimer++;
        switch (phase)
        {
            case 0: // hot!!
                if (fryTimer == 15)
                {
                    playSFX(sfxPopoHeliFire);
                    image_index = 7;
                }
                if (fryTimer == 60)
                {
                    stopSFX(sfxPopoHeliFire);
                    image_index = 8;
                    for (i = 0; i &lt;= 1; i++)
                    {
                        f = instance_create(x + (12 * image_xscale), y - 3, 
                        objHotDogManFireball);
                        f.grav = .25 - (.04 * (i = 1));
                        f.yspeed = ySpeedAim(y - 3, view_yview + 128, 
                        .25 - (.04 * (i = 1)));
                        f.xspeed = (3 - (.8 * (i = 1))) * image_xscale;
                    }
                }
                if (fryTimer == 80)
                    image_index = 0;
                if (fryTimer == 120)
                {
                    yspeed = -6;
                    xspeed = .5 * image_xscale;
                }
                if (fryTimer &gt;= 120)
                {
                    if (yspeed &gt;= 0 &amp;&amp; (y &gt;= ty || ground) &amp;&amp; !fried)
                    {
                        playSFX(sfxBreakDash);
                        image_index = 11;
                        grav = 0;
                        yspeed = 0;
                        fried = 1;
                        xspeed = 4 * image_xscale;
                    }
                    if (xcoll != 0)
                    {
                        playSFX(sfxEnemyBoost);
                        grav = .2;
                        xspeed = -sign(xcoll);
                        yspeed = -2;
                        image_index = 0;
                    }
                    if (fried == 1 &amp;&amp; ycoll &gt; 0)
                    {
                        image_xscale*= -1;
                        xspeed = 0;
                        fried = 0;
                        fryTimer = 0;
                        phase = 1;
                    }
                }
                break;
            case 1: // hot dog missile
                if (fryTimer == 10)
                    calibrateDirectionPoint(yeah);
                if (fryTimer == 45)
                {
                    var airT, xDis;
                    yspeed = -sqrt(abs(2*.2*96));
                    airT = abs(2*yspeed/.2);
                    xDis = (x + ((yeah - x) * 2)) - x;
                    xspeed = xDis / airT;
                }
                if (fryTimer &gt; 45)
                {
                    if (yspeed &gt;= 0 &amp;&amp; !fried)
                    {
                        grav = 0;
                        yspeed = 0;
                        xspeed = 0;
                        fried = 1;
                        fryTimer = 50;
                    }
                    if (fried == 1)
                    {
                        if (fryTimer == 60)
                            image_index = 9;
                        if (fryTimer == 90)
                        {
                            image_index = 10;
                            playSFX(sfxMissileLaunch);
                            for (i = -1; i &lt; 2; i+= 2)
                            {
                                h = instance_create(x - (14 * image_xscale), 
                                y - 8, objHotDogManMissile);
                                h.imgIndex = 2 + (-i);
                                h.direction = 90 + (45 * -i);
                                h.speed = 1.8;
                            }
                        }
                        if (fryTimer &gt;= 135)
                        {
                            grav = .2
                            calibrateDirection();
                            if (y &gt;= ty || ground)
                            {
                                playSFX(sfxBreakDash);
                                image_index = 11;
                                grav = 0;
                                yspeed = 0;
                                fried = 2;
                                xspeed = 4 * image_xscale;
                            }
                        }
                    }
                    if (fried == 2)
                    {
                        if (xcoll != 0)
                        {
                            playSFX(sfxEnemyBoost);
                            grav = .2;
                            xspeed = -sign(xcoll);
                            yspeed = -2;
                            image_index = 0;
                        }
                        if (sign(xspeed) = -image_xscale &amp;&amp; ycoll &gt; 0)
                        {
                            image_xscale*= -1;
                            xspeed = 0;
                            fried = 0;
                            fryTimer = 0;
                            phase = 0;
                        }
                    }
                }
                break;
            case 2:
                image_index = 0;
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (prtEnemyProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
for (i = -1; i &lt; 2; i+= 2)
{
    m = instance_create(x, y, objEnemyBullet);
    m.image_xscale = image_xscale;
    m.sprite_index = sprite_index;
    if (i &gt; 0)
        m.image_index = 6;
    else
        m.image_index = 5;
    m.yspeed = -3;
    m.xspeed = 2 * (i * image_xscale);
    m.grav = .2;
    m.contactDamage = 0;
    m.reflectable = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*draw_text(view_xview + 32, view_yview + 48, y - view_yview);
draw_text(view_xview + 32, view_yview + 64, xspeed);
draw_text(view_xview + 32, view_yview + 80, spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
