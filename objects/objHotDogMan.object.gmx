<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHotDogMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 160;
healthpoints = healthpointsStart;
grav = 0.2;
contactDamage = 4;
facePlayerOnSpawn = 1;
fried = 0;
fryTimer = 0;
spd = 0;
scrollSpeed = 0;
phase = 0;
introType = 0;
iAmFine = 1;
lastPhase = 0;
tx = x;
ty = y;

// Music
music = "HoTDBoss.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicVolume = 0.8;
musicLoop = true;
musicLoopSecondsStart = 6.665;
musicLoopSecondsEnd = 70.655;

// Damage Tables
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objYamato, 2);
enemyDamageValue(objKnuckleSandwich, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (!global.frozen)
{
    // Starting the intro animation
    if (startIntro)
    {
        startIntro = false;
        isIntro = true;
        drawBoss = true;
    }
    else if (isIntro)
    {
        visible = true;
        isIntro = false;
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        if (instance_exists(target))
        {
            tx = target.x;
            ty = target.y;
        }
        var yeah = view_xview + 128;
        fryTimer++;
        switch (phase)
        {
            case 0: // hot!!
                if (fryTimer == 15)
                {
                    playSFX(sfxPopoHeliFire);
                    image_index = 7;
                }
                if (fryTimer == 60)
                {
                    stopSFX(sfxPopoHeliFire);
                    image_index = 8;
                    for (l = -1; l &lt; 2; l+= 2)
                    {
                        for (i = 0; i &lt; 2 + (!iAmFine); i++)
                        {
                            f = instance_create(x, bbox_bottom + 1, 
                            objHotDogManFirebar);
                            f.goTimer = 30 * i;
                            f.xSpd = 2.1 * l;
                        }
                    }
                }
                if (fryTimer == 90)
                    image_index = 0;
                if (fryTimer == 210)
                {
                    yspeed = -6;
                    xspeed = 0.5 * image_xscale;
                }
                if (fryTimer &gt;= 210)
                {
                    if (yspeed &gt;= 0 &amp;&amp; (y &gt;= ty - 12 || ground) &amp;&amp; !fried)
                    {
                        playSFX(sfxBreakDash);
                        image_index = 11;
                        contactDamage = 6;
                        grav = 0;
                        yspeed = 0;
                        fried = 1;
                        xspeed = 4 * image_xscale;
                    }
                    if (xcoll != 0)
                    {
                        playSFX(sfxEnemyBoost);
                        contactDamage = 4;
                        grav = 0.2;
                        xspeed = -sign(xcoll);
                        yspeed = -2;
                        image_index = 0;
                    }
                    if (fried == 1 &amp;&amp; ycoll &gt; 0)
                    {
                        image_xscale*= -1;
                        xspeed = 0;
                        fried = 0;
                        fryTimer = -5;
                        lastPhase = 0;
                        phase = 3;
                    }
                }
                break;
            case 1: // hot dog missile
                if (fryTimer == 10)
                    calibrateDirectionPoint(yeah);
                if (fryTimer == 30)
                {
                    var airT, xDis;
                    yspeed = -sqrt(abs(2 * 0.2 * 96));
                    airT = abs(2*yspeed/0.2);
                    xDis = (x + ((yeah - x) * 2)) - x;
                    xspeed = xDis / airT;
                }
                if (fryTimer &gt; 30)
                {
                    if (yspeed &gt;= 0 &amp;&amp; !fried)
                    {
                        grav = 0;
                        yspeed = 0;
                        xspeed = 0;
                        fried = 1;
                        fryTimer = 50;
                    }
                    if (fried == 1)
                    {
                        if (fryTimer == 60)
                            image_index = 9;
                        if (fryTimer == 75)
                        {
                            image_index = 10;
                            playSFX(sfxMissileLaunch);
                            for (i = -1; i &lt; 2; i+= 2 - (!iAmFine))
                            {
                                h = instance_create(x - (14 * image_xscale), 
                                y - 8, objHotDogManMissile);
                                h.imgIndex = 2 + (-i);
                                h.direction = 90 + (45 * -i);
                                h.speed = 1.8;
                            }
                        }
                        if (fryTimer &gt;= 135)
                        {
                            grav = 0.2
                            calibrateDirection();
                            if (y &gt;= ty - 12 || ground)
                            {
                                playSFX(sfxBreakDash);
                                image_index = 11;
                                contactDamage = 6;
                                grav = 0;
                                yspeed = 0;
                                fried = 2;
                                xspeed = 4 * image_xscale;
                            }
                        }
                    }
                    if (fried == 2)
                    {
                        if (xcoll != 0)
                        {
                            playSFX(sfxEnemyBoost);
                            contactDamage = 4;
                            grav = 0.2;
                            xspeed = -sign(xcoll);
                            yspeed = -2;
                            image_index = 0;
                        }
                        if (sign(xspeed) = -image_xscale &amp;&amp; ycoll &gt; 0)
                        {
                            image_xscale*= -1;
                            xspeed = 0;
                            fried = 0;
                            fryTimer = -15;
                            lastPhase = 1;
                            phase = 3;
                        }
                    }
                }
                break;
            case 2: // slappy
                if (fryTimer == 10 || (!iAmFine &amp;&amp; fryTimer == 30))
                    image_index = 9;
                if (fryTimer == 40 || (!iAmFine &amp;&amp; fryTimer == 20))
                {
                    image_index = 10;
                    playSFX(sfxCannonShoot);
                    k = instance_create(x - (14 * image_xscale), y - 12, 
                    objHotDogManBouncingBall);
                    k.yspeed = -5;
                }
                if (fryTimer == 80)
                {
                    image_index = 1;
                    xspeed = 1.4 * image_xscale;
                }
                if (fryTimer &gt;= 80)
                {
                    if (fried != 1 &amp;&amp; ground)
                        image_index = 1 + (fryTimer/4) % 4;
                    if (!fried)
                    {
                        if (abs(tx - x) &lt;= 54 &amp;&amp; ((tx &lt; x &amp;&amp; image_xscale &lt; 0) ||
                        (tx &gt;= x &amp;&amp; image_xscale &gt; 0)) &amp;&amp; abs(ty - y) &lt;= 96)
                        {
                            fried = 1;
                            fryTimer = 80;
                            xspeed = 0;
                            image_index = 5;
                        }
                        if (xcoll != 0)
                        {
                            image_index = 0;
                            playSFX(sfxBikkyLand);
                            xspeed = -0.9 * image_xscale;
                            yspeed = -1.2;
                            fried = 2;
                        }
                    }
                    if (fried == 1)
                    {
                        if (fryTimer == 110)
                        {
                            image_index = 6;
                            playSFX(sfxSlashClaw);
                            s = instance_create(x + (24 * image_xscale), y, 
                            objHotDogManSlash);
                            s.image_xscale = image_xscale;
                            s.parent = id;
                            spd = 3;
                        }
                        xspeed = spd * image_xscale;
                        if (spd &gt; 0 &amp;&amp; fryTimer &gt; 110)
                            spd-= 0.1;
                        if (fryTimer == 150)
                        {
                            image_index = 1;
                            xspeed = 1.4 * image_xscale;
                            fried = 2;
                        }
                    }
                    if (fried == 2)
                    {
                        if (xcoll != 0)
                        {
                            image_index = 0;
                            playSFX(sfxBikkyLand);
                            xspeed = -0.9 * image_xscale;
                            yspeed = -1.2;
                        }
                        if (ycoll &gt; 0)
                        {
                            image_xscale *= -1;
                            image_index = 0;
                            xspeed = 0;
                            fried = 0;
                            fryTimer = -15;
                            lastPhase = 2;
                            phase = 3;
                        }
                    }
                }
                break;
            case 3: // chungus grandiose
                if (iAmFine)
                {
                    if (healthpoints &lt;= healthpointsStart/2)
                    {
                        if (fryTimer == 15)
                        {
                            playSFX(sfxEnkerCharge);
                            for (i = 0; i &lt; 360; i+= 45)
                            {
                                l = instance_create(x, y, 
                                objTrailEffect);
                                l.direction = i;
                                l.speed = 3;
                                l.sprite_index = sprExplosion;
                                l.image_alpha = 1;
                                l.image_speed = 0.6;
                            }
                            iAmFine = 0;
                            fryTimer = 0;
                            exit;
                        }
                    }
                    else if (fryTimer &gt;= 0)
                    {
                        phase = lastPhase + 1 + (-3 * (lastPhase == 2));
                        fryTimer = 0;
                    }
                }
                else
                {
                    if (fryTimer &gt;= 0)
                    {
                        phase = lastPhase + 1 + (-3 * (lastPhase == 2));
                        fryTimer = 0;
                    }
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (prtEnemyProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objHotDogManMissile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
for (var i = 0; i &lt; 12; i += 1) // create oil splash
{
    var inst = instance_create((x - 3) + irandom(6), y, objOilManParticle);
    var onst = instance_create((x - 3) + irandom(6), y, objOilManParticle);
    var anst = instance_create((x - 3) + irandom(6), y, objOilManParticle);
    inst.sprite_index = sprHotDogFire;
    onst.sprite_index = sprHotDogFire;
    anst.sprite_index = sprHotDogFire;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
/*draw_text(view_xview + 32, view_yview + 48, y - view_yview);
draw_text(view_xview + 32, view_yview + 64, xspeed);
draw_text(view_xview + 32, view_yview + 80, spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
