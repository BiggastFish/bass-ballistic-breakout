<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLongGuyIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 256;
healthpoints = healthpointsStart;
contactDamage = 3;
undamageable = true;
manualLoc = true;
canOil = false;
popupx = xstart + 8;
popupy = ystart;

animFrames = 2;

animTime = 10;
timer = 0;

charged = false;

grav = 0;
blockCollision = 0;

respawnRange = -1;
despawnRange = -1;

maxArmLength = 2;
currArmLength = maxArmLength;

dir = "h";
init = true;

imgalarm = 0;
img = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    currArmLength = maxArmLength;
    if (dir == "h")
    {
        image_xscale = 2 + (2 * maxArmLength);
        x = xstart - 8 * currArmLength;
        sprite_index = sprLongGuyHorizontal;
    }
    else if (dir == "v")
    {
        image_yscale = 2 + (2 * maxArmLength);
        y = ystart - 8 * currArmLength;
        sprite_index = sprLongGuyVertical;
    }
    init = false;
}

event_inherited();

if (entityCanStep())
{
    timer++;
    if (charged)
    {
        if (currArmLength &lt; maxArmLength)
        {
            if (timer &gt;= 10)
            {
                if (dir == "h")
                    image_xscale+= 2;
                else if (dir == "v")
                    image_yscale+= 2;
                timer = 0;
                currArmLength++;
            }
        }
    }
    else
    {
        if (timer &gt;= 90)
        {
            charged = true;
            timer = 0;
        }
    }
    if (dir == "h")
        x = xstart - 8 * currArmLength;
    else if (dir == "v")
        y = ystart - 8 * currArmLength;
}
else
{
    if (dead)
    {
        currArmLength = maxArmLength;
        if (dir == "h")
        {
            image_xscale = 2 + (2 * maxArmLength);
            x = xstart - 8 * currArmLength;
        }
        else if (dir == "v")
        {
            image_yscale = 2 + (2 * maxArmLength);
            y = ystart - 8 * currArmLength;
        }
        charged = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (currArmLength &gt; 0)
{
    if (dir == "h")
    {
        image_xscale-= 2;
        x+= 8;
    }
    else if (dir == "v")
    {
        image_yscale-= 2;
        y+= 8;
    }
    currArmLength--;
}
charged = false;
timer = 0;
healthpoints = healthpointsStart;
playSFX(sfxEnemyHit);

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((!global.frozen &amp;&amp; !global.timeStopped) || instance_exists(objSectionSwitcher))
{
    imgalarm += 1;
    if (imgalarm &gt;= animTime)
    {
        imgalarm = 0;
        img = (img+1) mod animFrames;
    }
}

var imgadd;

if (dir == "h")
{
    for (i = 0; i &lt; image_xscale; i += 1)
    {
        if (i == 0 &amp;&amp; image_xscale &gt; 2)//left claw
        {
            imgadd = 0;
        }
        else if (i == 1 &amp;&amp; image_xscale &gt; 4) // left cuff
        {
            imgadd = animFrames;
        }
        else if (i &gt;= 2 &amp;&amp; i &lt; (floor(image_xscale / 2)) - 1 &amp;&amp; image_xscale &gt; 4) // left arm
        {
            imgadd = animFrames * 2;
        }
        else if (i == (floor(image_xscale / 2)) - 1 &amp;&amp; image_xscale &gt; 2) // left part of full skull
        {
            imgadd = animFrames * 3;
        }
        else if (i == floor(image_xscale / 2) &amp;&amp; image_xscale &gt; 2) // right part of full skull
        {
            imgadd = animFrames * 4;
        }
        else if (i &gt;= floor(image_xscale / 2) + 1 &amp;&amp; i &lt; image_xscale - 2 &amp;&amp; image_xscale &gt; 4) // right arm
        {
            imgadd = animFrames * 5;
        }
        else if (i == image_xscale - 2 &amp;&amp; image_xscale &gt; 4) // right cuff
        {
            imgadd = animFrames * 6;
        }
        else if (i == image_xscale - 1 &amp;&amp; image_xscale &gt; 2) // right claw
        {
            imgadd = animFrames * 7;
        }
        else if (i == 0 &amp;&amp; image_xscale == 2) // left part of tucked skull
        {
            imgadd = animFrames * 8;
        }
        else if (i == 1 &amp;&amp; image_xscale == 2) // right part of tucked skull
        {
            imgadd = animFrames * 9;
        }
        draw_sprite(sprite_index, img + imgadd, x + i * 8, y);
    }
}
else if (dir == "v")
{
    for (i = 0; i &lt; image_yscale; i += 1)
    {
        if (i == 0 &amp;&amp; image_yscale &gt; 2)// top claw
        {
            imgadd = 0;
        }
        else if (i == 1 &amp;&amp; image_yscale &gt; 4) // top cuff
        {
            imgadd = animFrames;
        }
        else if (i &gt;= 2 &amp;&amp; i &lt; (floor(image_yscale / 2)) - 1 &amp;&amp; image_yscale &gt; 4) // top arm
        {
            imgadd = animFrames * 2;
        }
        else if (i == (floor(image_yscale / 2)) - 1 &amp;&amp; image_yscale &gt; 2) // top part of full skull
        {
            imgadd = animFrames * 3;
        }
        else if (i == floor(image_yscale / 2) &amp;&amp; image_yscale &gt; 2) // bottom part of full skull
        {
            imgadd = animFrames * 4;
        }
        else if (i &gt;= floor(image_yscale / 2) + 1 &amp;&amp; i &lt; image_yscale - 2 &amp;&amp; image_yscale &gt; 4) // bottom arm
        {
            imgadd = animFrames * 5;
        }
        else if (i == image_yscale - 2 &amp;&amp; image_yscale &gt; 4) // bottom cuff
        {
            imgadd = animFrames * 6;
        }
        else if (i == image_yscale - 1 &amp;&amp; image_yscale &gt; 2) // bottom claw
        {
            imgadd = animFrames * 7;
        }
        else if (i == 0 &amp;&amp; image_yscale == 2) // top part of tucked skull
        {
            imgadd = animFrames * 8;
        }
        else if (i == 1 &amp;&amp; image_yscale == 2) // bottom part of tucked skull
        {
            imgadd = animFrames * 9;
        }
        draw_sprite(sprite_index, img + imgadd, x, y + i * 8);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
