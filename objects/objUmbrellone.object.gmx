<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprUmbrellone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>mskUmbrellone</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 10;
healthpoints = healthpointsStart;
contactDamage = 5;

flying = false;
msk = mskUmbrellone;
timer = 0;
xSpd = 0;

facePlayerOnSpawn = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = msk;
event_inherited();
mask_index = sprite_index;

if (entityCanStep())
{
    var tx = 0, ty = 0;
    if (instance_exists(target))
    {
        tx = target.x;
        ty = target.y;
    }
    
    if (flying)
    {
        if (xSpd != (1.75 * image_xscale)) xSpd = 1.75 * image_xscale;
        if (yspeed &gt; 1)  yspeed = 1;
        if (abs(tx - x) &lt;= 32 || xcoll != 0 ||
        (x &gt;= tx &amp;&amp; xSpd &gt; 0) || (x &lt;= tx &amp;&amp; xSpd &lt; 0))
        {
            flying = false;
            image_index = 2;
        }
    }
    else
    {
        timer+= ground;
        if (ground)
        {
            if (timer == 6)
            {
                image_index = 0;
                calibrateDirection();
            }
            if (timer == 26)
            {
                image_index = 2;
                calibrateDirection();
            }
            if (timer == 30)
            {
                yspeed = -6;
                xSpd = xSpeedAim(x, y, x + image_xscale * abs(tx - x), 
                ty, yspeed, grav, 2);
                
                image_index = 0;
                timer = 0;
            }
        }
        else if (yspeed &gt; 0 &amp;&amp; (abs(tx - x) &gt;= 48) &amp;&amp; image_index == 0
        &amp;&amp; ((x &gt; tx &amp;&amp; image_xscale &lt; 0) || (x &lt; tx &amp;&amp; image_xscale &gt; 0)))
        {
            image_index = 1;
            flying = true;
            xSpd = 1.75 * image_xscale;
        }
    }
    if ((yspeed &gt; 0 || ycoll &lt; 0) &amp;&amp; image_index == 0)
    {
        y-= 9;
        image_index = 2;
    }
    if (ycoll &gt; 0)
    {
        flying = false;
        xSpd = 0;
        image_index = 2;
        playSFX(sfxHeavyLand);
    }
    if (image_index == 0)
        msk = mskUmbrellone;
    else
        msk = mskUmbrelloneSmall;
    xspeed = xSpd;
}
else if (dead)
{
    flying = false;
    ground = true;
    mask_index = mskUmbrellone;
    image_index = 0;
    msk = mskUmbrellone;
    timer = 0;
    xSpd = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
