<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canProceed = true;
drawtext = 0;

silh = 0;
logo = 0;
boxTop = 240;
offset = 48;

phase = 0;
option = 0;
options = 2;
offset2 = 0;

wait = 16;
timer = 0;
overallTimer = 0;

// reset all game state
engineConfig();
freshSaveFile();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.keyPausePressed[0])
{
    event_user(0);
    event_user(1);
}

overallTimer++;
timer++;
switch (phase)
{
    case 0: // bass silhouette bleed
        if (timer &gt;= 30)
        {
            if (silh &lt; 144)
            {
                silh+= 3;
            }
            else
            {
                silh = 144;
                phase = 1;
                timer = 0;
            }
        }
        break;
    case 1: // sters
        if (timer == 45)
        {
            b = instance_create(x, y, objParallax);
            b.myBG = bgStarFieldBackground;
            b.yspeed = -2;
            b.depth = depth + 4;
            m = instance_create(x, y, objParallax);
            m.myBG = bgStarFieldMiddleground;
            m.yspeed = -3;
            m.depth = depth + 4;
            f = instance_create(x, y, objParallax);
            f.myBG = bgStarFieldForeground;
            f.yspeed = -4;
            f.depth = depth + 2;
        }
        if (timer &gt;= 45)
        {
            if (boxTop)
            {
                boxTop-= 8;
            }
            else
            {
                boxTop = 0;
                timer = 0;
                phase = 2;
            }
        }
        break;
    case 2: // logo bleed
        if (timer &gt;= 45)
        {
            if (logo &lt; 88)
            {
                logo+= 2;
            }
            else if (timer &gt;= 105 &amp;&amp; timer &lt; 800)
            {
                timer = 800;
            }
            else if (timer &gt;= 820 &amp;&amp; timer &lt;= 960)
            {
                if (timer mod 4 == 0)
                {
                    if (offset2 &lt; 4)
                    {
                        offset2++;
                    }
                    else
                    {
                        for (i = 1; i &lt;= 3; i++)
                        {
                            r = instance_create(128, 119, objTrailEffect);
                            r.depth = depth - (1 + i);
                            r.sprite_index = sprTitleLogo;
                            r.image_index = 1;
                            r.image_alpha = 1 - (0.2 * i);
                            r.deathTimerMax = 5 * i;
                        }
                        timer = 960;
                    }
                }
            }
            else if (timer &gt;= 1020)
            {
                if (timer mod 4 == 0)
                {
                    if (offset2)
                    {
                        offset2--;
                    }
                    else
                    {
                        for (i = 1; i &lt;= 3; i++)
                        {
                            r = instance_create(128, 123, objTrailEffect);
                            r.depth = depth - (1 + i);
                            r.sprite_index = sprTitleLogo;
                            r.image_index = 1;
                            r.image_alpha = 1 - (0.2 * i);
                            r.deathTimerMax = 5 * i;
                        }
                        phase = 3;
                        timer = 0;
                        offset2 = 0;
                        logo = 0;
                    }
                }
            }
        }
        break;
    case 3: // logo arc
        if (timer &gt;= 10 &amp;&amp; (timer mod 20 - 10) == 0 &amp;&amp; timer &lt;= 80)
        {
            l = instance_create(-144, 123, objWeaponGetEffect);
            l.phase = 0;
            l.grav = 0.25;
            l.yspeed = -6;
            l.xspeed = xSpeedAim(-144, 123, 128, 123, -6, 0.25);
            l.sprite_index = sprTitleLogo;
            l.depth = depth - 10;
        }
        if (timer &gt; 80 &amp;&amp; !instance_exists(objWeaponGetEffect))
        {
            timer = 0;
            phase = 4;
        }
        break;
    case 4: // logo spiralling
    case 5:
        if (timer == 5)
        {
            for (i = 1; i &lt;= 3; i++)
            {
                r = instance_create(128 + round(cos(degtorad
                (i * 120)) * 198), 123 + round(sin
                (degtorad(i * 120)) * 198), 
                objWeaponGetEffect);
                r.rot = (i * 120);
                r.dir = ((phase == 4) + ((phase == 5) * -1));
                r.phase = 0;
                r.miniPhase = 1;
                r.sprite_index = sprTitleLogo;
                r.depth = depth - (10 + i);
            }
        }
        if (timer &gt; 10 &amp;&amp; !instance_exists(objWeaponGetEffect))
        {
            timer = 0;
            phase++;
        }
        break;
    case 6: // logo shooting
        if (timer == 5)
        {
            for (i = logo + 45; i &lt;= logo + 315; i+= 90)
            {
                r = instance_create(128 + round(cos(degtorad
                (i)) * 198), 123 + round(sin
                (degtorad(i)) * 198), 
                objWeaponGetEffect);
                r.rot = i;
                r.phase = 0;
                r.miniPhase = 2;
                r.sprite_index = sprTitleLogo;
                r.depth = depth - 10;
            }
        }
        if (timer &gt; 10 &amp;&amp; !instance_exists(objWeaponGetEffect))
        {
            timer = 0;
            logo+= 45;
            if (logo &gt;= 90)
            {
                logo = 0;
                phase = 7;
            }
        }
        break;
    case 7:
        break;
}
if (canProceed)
{
    drawtext = 1;
    
    if (wait)
    {
        wait -= 1;
        exit;
    }
    
    dir = global.keyDownPressed[0] - global.keyUpPressed[0];
    if (dir != 0)
    {
        demoTimer = 0;
        option += dir;
        if (option == -1)
        {
            option = options - 1;
        }
        if (option == options)
        {
            option = 0;
        }
        playSFX(sfxMenuMove);
    }
    
    if (global.keyPausePressed[0])
    {
        switch (option)
        {
            case 0: // Start 
                canProceed = false;
                playSFX(sfxMenuSelect);
                global.nextRoom = rmRoomSelect;
                break;
            case 1: // Options 
                canProceed = false;
                playSFX(sfxMenuSelect);
                global.nextRoom = rmOptions;
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprDot, 0, 0, 0, 256, boxTop, 0, c_black, 1);
if (silh)
{
    draw_sprite_part(sprBassTitleSilhouette, 0, 0, 0, 117, silh, 128 - 56, offset);
    if (silh &lt; 144)
    {
        
        for (i = 1; i &lt; (240 - (offset + silh)); i++)
        {
            draw_sprite_part(sprBassTitleSilhouette, 0, 0, silh, 117, 1, 128 - 56, 
            (offset + silh) + i);
        }
    }
}
switch (phase - 1)
{
    case 1:
        if (timer &gt;= 45)
        {
            draw_sprite_part(sprTitleLogo, 0, 0, 0, 144, logo, 
            128 - 72, offset + 31 - offset2);
            if (logo &lt; 88)
            {
                for (i = 1; i &lt; (240 - (offset + 31 + logo)); i++)
                {
                    draw_sprite_part(sprTitleLogo, 0, 0, logo, 144, 1, 128 - 72, 
                    (offset + 30 + logo) + i);
                }
            }
        }
        break;
}

/*draw_text(x, y, floor(overallTimer / 60));
draw_text(x, y + 16, phase);

/*var oldCol = draw_get_color();
draw_set_color(c_white);

draw_set_valign(fa_top);
draw_set_halign(fa_left);

if (drawtext)
{
    draw_text(96, 160, "GAME START##OPTIONS");
}
if (canProceed)
{
    draw_sprite(sprOptionsCursor, 0, 96 - 12, 160 + option * 16);
}

draw_set_color(oldCol);

// colored text overlay
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    draw_rectangle(96 - 12 - 4, 160 - 4, 176 + 2, 160 + 23 + 3, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
