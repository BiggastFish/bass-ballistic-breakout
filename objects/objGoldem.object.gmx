<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGoldem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 80;
healthpoints = healthpointsStart;
contactDamage = 4;
hitInvun = 90;
facePlayerOnSpawn = 1;
phase = 0;
parent = noone;
punches = 0;
canFight = 0;
dieTimer = 0;
fightTimer = 0;
spd = 0;
spdTimer = 0;
canIce = 0;
imgTop = 64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (entityCanStep())
{
    if (instance_exists(parent))
    {
        if (parent.isFight)
        {
            canFight = true;
            fightTimer+= (phase &lt; 2);
        }
        if (canFight)
        {
            switch (phase)
            {
                case 0: // walkin
                    xspeed = .3 * image_xscale;
                    if (fightTimer % 30 == 0)
                        calibrateDirection();
                    if (fightTimer &gt;= 210)
                    {
                        image_index = 1;
                        fightTimer = 0;
                        phase = 1;
                    }
                    break;
                case 1: // punch!!!
                    if (fightTimer == 30)
                    {
                        playSFX(sfxEnemyBoost);
                        image_index = 2;
                        spd = 4;
                        spdTimer = 4;
                    }
                    if (spdTimer &gt; 0)
                    {
                        spd-= .1;
                        spdTimer-= .1;
                    }
                    else if (fightTimer &gt;= 60)
                    {
                        spd = 0;
                        spdTimer = 0;
                        if (fightTimer &lt; 300)
                        {
                            image_index = 1;
                            fightTimer = 300;
                            punches++;
                        }
                        if (fightTimer == 330)
                        {
                            image_index = 0;
                            calibrateDirection();
                            fightTimer = 0;
                            if (punches &lt; 2)
                                phase = 0;
                            else
                            {
                                phase = 2;
                                punches = 0;
                            }
                        }
                    }
                    xspeed = spd * image_xscale;
                    break;
                case 2: // SMASH
                    with (parent)
                    {
                        if (phase == 0 &amp;&amp; dropsDone == 2)
                        {
                            dropsDone = 0;
                            dropTimer = 0;
                            phase = 2;
                            image_xscale = other.image_xscale;
                        }
                    }
                    if (parent.x == x || fightTimer &gt;= 60)
                        fightTimer++
                    if (fightTimer &lt; 60)
                        image_index = 3 + (parent.x == x) 
                        + (fightTimer / 7) % 2;
                    if (fightTimer == 60)
                    {
                        image_index = 6;
                        playSFX(sfxCommandoQuake);
                        l = instance_create(x + (26 * image_xscale), 
                        y + 32, objGoldemWave);
                        l.xspeed = 2.5 * image_xscale;
                    }
                    if (fightTimer &gt;= 200 &amp;&amp; parent.x == parent.midPointX)
                    {
                        phase = 0;
                        fightTimer = 0;
                        calibrateDirection();
                        image_index = 0;
                    }
                    break;
                case 3: // break apart :pensive:
                    image_index = 7 + (dieTimer / 5) % 2;
                    if (dieTimer % 10 == 0)
                    {
                        playSFX(sfxGutsQuake);
                        screenShake(10, 0, 2);
                    }
                    if (dieTimer &gt;= 20 &amp;&amp; dieTimer % 20 == 0)
                    {
                        playSFX(sfxBolt);
                        for (i = -2; i &lt; 3; i++)
                        {
                            if (i != 0)
                            {
                                m = instance_create(x + (i * 12), 
                                bbox_bottom - imgTop, objEnemyBullet);
                                m.canDamage = 0;
                                m.grav = .2;
                                m.yspeed = -2;
                                m.xspeed = 2 * sign(i);
                                m.sprite_index = sprGoldManCoinSpread;
                                m.image_speed = .4;
                            }
                        }
                        imgTop-= 8;
                        if (imgTop &lt;= 0)
                            instance_destroy();
                    }
                    break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase &lt; 3)
    event_inherited();
else
    draw_sprite_part_ext(sprite_index, image_index, 0, 64 - imgTop, 64, imgTop, 
    x - 32, y - 32 + (64 - imgTop), image_xscale, 1, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
