<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/// I LIKE CHEX MIX

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

facePlayer = false;
blockCollision = 0;
grav = 0;

// can change these in creation code


segmentCount = 4; //segment amount
turnIncrement = 22.5; //amount of degrees turned 
turnFrames = 18; //time required to turn
originalSpeed = 1; //original speed 
maxSpeed = -1;
speedIncrement = 0.25; //speed incremented when segment is shot
// Enemy specific code
timer = 0;
newAngle = 0;
startAngle = -1;
angle = 0;
spd = 1;
canAim = false;
curSegment = segmentCount;
segment[0] = self;
randxspd = 0;
randyspd = 0;
selfFall = true;

despawnRange = -1;
canPush = false; //controls whether Hurricane Cutter can push an enemy
originalAngle = -1;
init = 1;
canSlash = false;
destroyBot = false;

palette = sprClineFPalette;
palette_index = 0;
col = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if instance_exists(objSectionSwitcher)
{
    visible = false;
}
if (entityCanStep())
{
    if init == 1
    {
        init = 0;
        visible = true;
    }
    with (objClineFSegment)
    {
        if parent == other.id
        {
            spd = other.spd;
        }
        visible = other.visible;
    }
    if (canAim) // Aiming
    {
        if instance_exists(target)
        {
            newAngle = point_direction(x, y, target.x, target.y);
        }
    }
    else
    {
        newAngle = angle + turnIncrement*image_xscale;
    }
    newAngle = wrapAngle(round(newAngle / turnIncrement) * turnIncrement);
    timer += 1;
    if (timer &gt;= floor(turnFrames *(originalSpeed/spd)))
    {
        timer = 0;
        if (angle != newAngle)
        {
            rotDir = 1;
            var pdist = 0;
            var delta = 360 - angle;
            var nangl = (newAngle + delta) % 360;
            if (nangl &gt;= 180)
                rotDir = -1;
            angle = wrapAngle(angle + turnIncrement * rotDir);
            image_angle += turnIncrement * rotDir;
        }
    }
    if timer &gt;= 0
    {
        xspeed = cos(degtorad(angle)) * spd;
        yspeed = -sin(degtorad(angle)) * spd;  
    }
    if destroyBot
    {
        var canDelete = true;
        if y &gt; global.sectionBottom
        {
            with (objClineFSegment)
            {
                if parent == other.id
                {
                    if y &lt; global.sectionBottom
                    {
                        canDelete = false;
                    }
                }
            }
        }
        else
        {
            canDelete = false;
        }
        
        if canDelete
        {
            dead = true;
            spawned = false;
            
            event_user(EV_SPAWN); // despawn event
        }
    }
}
else if dead
{
    visible = false;
    for (var i = 1; i &lt; segmentCount + 1; i++)
    {
        segment[i] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canAim = false;
spd = originalSpeed;
curSegment = segmentCount;

timer = 0;
newAngle = 0;
angle = 0;
selfFall = true;

if originalAngle != -1
{
    image_angle = originalAngle;
}
originalAngle = image_angle;

if maxSpeed == -1
{
    maxSpeed = originalSpeed + segmentCount*speedIncrement;
}
if startAngle != -1
{
    angle = startAngle;
}
else
{
    angle = image_angle + 180*(image_xscale &lt; 0);
}
for (var i = 1; i &lt; segmentCount + 1; i++)
{
    with instance_create(bboxGetXCenter(),bboxGetYCenter(),objClineFSegment)
    {
        turnIncrement = other.turnIncrement;
        turnFrames = other.turnFrames;
        spd = other.spd;
        timer = other.timer - 16*i;
        angle = other.angle;
        image_xscale = other.image_xscale;
        newAngle = other.newAngle;
        canAim = other.canAim;
        num = i;
        despawnRange = -1;
        respawnRange = -1;
        parent = other.id;
        depth += num;
        other.segment[i] = self.id;
        visible = false;
        col = other.col;
        palette_index = other.palette_index;
    }
}
init = 1;
visible = false;
randyspd = -irandom(20) * 0.1;
randxspd = irandom(20) * 0.05 * choose(1, -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canAim = true;

if instance_exists(other)
{
    if (global.damage &gt;= healthpoints &amp;&amp; other.object_index == objRollSlash)
    {
        selfFall = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if selfFall
{
    var _i;
    _i = instance_create(x, y, objSlashEffect);
    _i.sprite_index = sprite_index;
    _i.image_index = image_index;
    _i.image_xscale = image_xscale;
    _i.image_yscale = image_yscale;
    _i.image_angle = image_angle;
    _i.xspeed = randxspd;
    _i.yspeed = randyspd;
}
with (objClineFSegment)
{
    if parent == other.id
    {
        event_user(10);
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>palette_index = col;
palette_set(palette, palette_index);   
event_inherited();
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
